<h2>It is possible to build a number system native to Modal.</h2>

<p>The language does not accommodate for any specific numerical system, but allows for the notion of numbers to be implemented with Peano Numerals:</p>

<pre>
&lt;&gt; (add (s ?x) (s ?y)) (s (add ?x (s ?y)))
&lt;&gt; (add (s ?x) (0)) (s ?x)
&lt;&gt; (add (0) (s ?y)) (s ?y)
&lt;&gt; (add (0) (0)) (0)
&lt;&gt; (sub (s ?x) (s ?y)) (sub ?x ?y)
&lt;&gt; (sub (s ?x) (0)) (s ?x)
&lt;&gt; (sub (0) (s ?y)) (s ?y)
&lt;&gt; (sub (0) (0)) (0)
&lt;&gt; (mul (s ?x) (s ?y)) (add (s ?x) (mul (s ?x) (sub (s ?y) (s (0)))))
&lt;&gt; (mul (s ?x) (s (0))) (s ?x)
&lt;&gt; (mul (s (0)) (s ?y)) (s ?y)
&lt;&gt; (mul (s ?x) (0)) (0)
&lt;&gt; (mul (0) (s ?x)) (0)
</pre>

<p>To convert from prefix notation to infix: </p>
<pre>
&lt;&gt; (?x + ?y) (add ?x ?y)
&lt;&gt; (?x - ?y) (sub ?x ?y)
&lt;&gt; (?x * ?y) (mul ?x ?y)
</pre>

<p>Altogether, we have enough parts to implement factorial: </p>
<pre>
&lt;&gt; (factorial (s (0))) ((s (0)))
&lt;&gt; (factorial (s ?x)) (((s ?x) * factorial ((s ?x) - (s (0)))))

factorial (s (s (s (s (s (0))))))
</pre>

<h3>Binary</h3>

<p>Prefix rules to increment a binary number:</p>

<pre>
&lt;&gt; (inc (0 ?x)) ((1 ?x))
&lt;&gt; (inc (1 ?x)) ((0 inc ?x))
&lt;&gt; (inc ()) ((1 ()))

?(?-) (Count to 0x7f)

&lt;&gt; (> increc (1 (1 (1 (1 ()))))) (done.)
&lt;&gt; (> increc ?i) (> (inc ?i wait) increc)
&lt;&gt; (> (?i wait) increc) (> increc ?i)

> increc ()
</pre>
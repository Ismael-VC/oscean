<h2>A cons cell is a data structure which holds both data and the address to the following cell.</h2>

<p>In functional programming languages, a list is the most versatile data type that can be used to store a collection of similar data items. Uxn uses singular opcodes operating on words of equal length, one might come across a problem that is better addressed with routines that operate on ordered lists of items and nested stacks. This 300 bytes implementation of cons cells gives your project that power.</p>

<p>The data slot is known as the <i>CAR</i>, and the address slot is known as the <i>CDR</i>. The purpose is so that ordered lists can be traversed by going from one cell to the next, it also allows one to change the order of cells without manually moving any of the cells' data. </p>

<img src='../media/refs/cons.png'/>

<p>Let us consider the following cons list: </p>
<pre>(list cat dog owl)</pre>

<p>Also equivalent to the expression:</p>
<pre>(cons owl (cons dog (cons cat nil)))</pre>

<p>A translation into uxntal assembly would be something like the following, in which <code>POP2</code> is to get rid of the dangling pointer. This can obviously be made prettier with macros, but we'll keep things straightforward.</p>
<pre>
;nil JSR2
	;cat ;cons JSR2
		;dog ;cons JSR2
			;owl ;cons JSR2
POP2
</pre>

<h3>Creating a new list</h3>

<p>The <code>@alloc</code> routine needs a <code>@memory</code> label to an address with enough space to host the lists, it returns the address of the newly created cell. A list begins with a cons cell whose <i>CAR</i> is a pointer to the cell's data and whose <i>CDR</i> is the next cell. A nil list begins with the nil function pointer.</p>

<p>The <code>@cons</code> routine creates a new cons cell, making the <code>fn</code> its <i>CAR</i>, and the next cell its <i>CDR</i>. It returns the address of the newly created cons cell. <code>@cons</code> is often used to add a single element to the front of a list. This is called <i>consing</i> the element onto the list.</p>

<pre>
@alloc ( -- cell* )

	[ LIT2 &next :memory ] DUP2 #0004 ADD2 ,&next STR2

JMP2r

@nil ( -- list* )

	,alloc JSR ;nil

@cons ( list* fn* -- list* )

	( car ) ,alloc JSR STH2k STA2
	( cdr ) STH2kr INC2 INC2 STA2
	STH2r

JMP2r
</pre>

<h3>Duplicate/Remove</h3>

<p>We can build new primitives to duplicate and remove cells from the list:</p>

<pre>
@pop ( list* -- list* )

	INC2 INC2 LDA2

JMP2r

@dup ( list* -- list* )

	LDA2k ,cons JSR

JMP2r
</pre>

<h3>Nesting two lists</h3>

<p>You can make a list of lists, or nested lists, using the <code>@cons</code> routine with two cons cells from different lists.</p>

<pre>
( list1 )
;nil JSR2
	;cat ;cons JSR2
		;dog ;cons JSR2
			;owl ;cons JSR2
( list2 )
;nil JSR2
	;ant ;cons JSR2
		;bat ;cons JSR2
			;cow ;cons JSR2
( list3 list1 list2 )
;nil JSR2
	SWP2 ;cons JSR2
		SWP2 ;cons JSR2
;echo JSR2
	</pre>

<h3>Joining two lists</h3>

<p>Two lists of cons cells can be joined together into one by modifying the last pointer of the second list, and pointing it to the first one.</p>

<pre>
@last ( list* -- cell* )

	&w INC2 INC2 LDA2 LDA2k ;nil NEQ2 ,&w JCN
	INC2 INC2

JMP2r

@join ( list-a* list-b* -- list-b* )

	STH2k ,last JSR INC2 INC2 STA2 STH2r

JMP2r
</pre>

<h3>Finding the length</h3>

<p>This routine will run through a list and return its length.</p>
<pre>
@length ( list* -- length* )

	LIT2r 0000
	&w INC2 INC2 INC2r LDA2 LDA2k ;nil NEQ2 ,&w JCN
	POP2 STH2r

JMP2r
</pre>

<h3>Printing a list</h3>

<p>Running through a list and its nested lists is a matter of itterating through each cell's <i>CDR</i> until a <code>;nil</code> pointer is found. The following routine will run recursively. If the list is a series of function pointers, you can modify this into an evaluation routine.</p>

<pre>
@echo ( list* -- )

	#2818 DEO #2018 DEO
	&w
		LDA2k INC2 INC2 LDA2 ;nil EQU2 ,&fn JCN
			( list )
			LDA2k ;echo JSR2 ,&resume JMP
			&fn
			LDA2k LDA2 ,print JSR #2018 DEO
		&resume
		INC2 INC2 LDA2 LDA2k ;nil NEQ2 ,&w JCN
	POP2
	#2918 DEO #2018 DEO

JMP2r

@print ( short* -- )

	SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO

JMP2r
</pre>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/ornithologics' target='_blank'>Ornithologics</a></li>
</ul>

<h2>Functional programming concepts in Uxntal.</h2>

<p>Functions are the only primitive data types in untyped lambda calculus. It is nevertheless possible to represent numerals, booleans, lists, sets, characters and strings as higher order functions in untyped lambda calculus using Church encoding.</p>

<h3>Quoting Opcodes</h3>

<p>Quoting is the act of <a href='https://limited.systems/articles/uxntal-quoting/' target='_blank'>deferring an operation</a>, for example, the following code will instantly put the resulting value of <code>0d</code> on the stack:</p>

<pre>#06 #07 ADD</pre>

<p>If we instead do the following, the ADD opcode will remain on the stack as a value and will not immediately compute the result:</p>

<pre>#06 #07 LIT ADD</pre>

<p>The opcode can then be utilized when needed by using the following pattern, which effectively pulls the opcode from the stack and writes it at the next address in memory:</p>

<pre>#06 #07 LIT ADD <i>( unquote )</i> #00 STR $1</pre>

<p>To familiarize yourself with Combinatory Logic, begin with the <a href='logic.html'>primer</a>.</p>

<ul>
	<li><a href='https://codeberg.org/wimvanderbauwhede/funktal' target='_blank'>Statically Typed Functional Language on Uxn</a></li>
</ul>


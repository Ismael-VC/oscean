<h2>A collection of commonly used routines in Uxntal projects.</h2>

<p>The following snippets are in the standard format.</p>

<h3>Numbers</h3>

<p>To emit hexadecimal numbers:</p>
<pre>
@print ( short* -- )

	SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO

JMP2r
</pre>

<p>To emit a decimal number from a short:</p>
<pre>
@print-dec ( value* -- )

	#2710 ,&parse JSR
	#03e8 ,&parse JSR
	#0064 ,&parse JSR
	#000a ,&parse JSR
	,&emit JSR POP

JMP2r
	&parse DIV2k DUP ,&emit JSR MUL2 SUB2 JMP2r
	&emit #30 ADD #18 DEO JMP2r
</pre>

<p>To emit a decimal number from a short, without leading zeroes:</p>
<pre>
@print-dec-trim ( value* -- )

	#00 ,&zero STR
	#2710 ,&parse JSR
	#03e8 ,&parse JSR
	#0064 ,&parse JSR
	#000a ,&parse JSR
	,&emit JSR POP

JMP2r
	&parse DIV2k DUP ,&emit JSR MUL2 SUB2 JMP2r
	&emit 
		DUP [ LIT &zero $1 ] #0000 EQU2 ,&skip JCN
		#01 ,&zero STR DUP #30 ADD #18 DEO &skip POP JMP2r
</pre>

<p>To convert a decimal string to a hexadecimal value.</p>
<pre>
@sdec ( addr* -- hex* )

	LIT2r 0000
	&while
		LDAk #30 SUB #00 SWP
		STH2r #000a MUL2 ADD2 STH2
		INC2 LDAk ,&while JCN
	POP2
	STH2r

JMP2r
</pre>

<h2>Strings</h2>

<p>To emit a string.</p>
<pre>
@print-str ( str* -- )

	&while
		LDAk #18 DEO
		INC2 LDAk ,&while JCN
	POP2

JMP2r
</pre>

<h3>string primitives</h3>
<pre>
@scat ( src* dst* -- )

	DUP2 ,slen JSR ADD2

@scpy ( src* dst* -- )
	
	STH2
	&while
		LDAk STH2kr STA INC2r
		INC2 LDAk ,&while JCN
	POP2
	#00 STH2r STA

JMP2r

@slen ( str* -- len* )

	DUP2 ,scap JSR SWP2 SUB2

JMP2r

@scap ( str* -- end* )

	LDAk #00 NEQ JMP JMP2r
	&while INC2 LDAk ,&while JCN

JMP2r

@sput ( char str* -- )

	,scap JSR STA

JMP2r

@spop ( str* -- )

	LDAk ,&no-null JCN
		POP2 JMP2r &no-null
	#00 ROT ROT ,scap JSR #0001 SUB2 STA

JMP2r
</pre>

<h3>Memory</h3>

<pre>
@mclr ( addr* len* -- )

	OVR2 ADD2 SWP2
	&loop
		STH2k #00 STH2r STA
		INC2 GTH2k ,&loop JCN
	POP2 POP2

JMP2r

@mcpy ( src* dst* len* -- )

	SWP2 STH2
	OVR2 ADD2 SWP2
	&loop
		LDAk STH2kr STA INC2r
		INC2 GTH2k ,&loop JCN
	POP2 POP2
	POP2r

JMP2r
</pre>

<h3>Random</h3>

<pre>
@prng-init ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
		.DateTime/year  DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

JMP2r
</pre>

<h2>Macros</h2>

<h3>Buttons</h3>

<pre>
%B_UP { #10 } %B_DOWN { #20 } %B_LEFT   { #40 } %B_RIGHT { #80 }
%B_A  { #01 } %B_B    { #02 } %B_SELECT { #04 } %B_START { #08 }
</pre>

<h3>Binary Opcodes</h3>

<pre>
%ROL { DUP #07 SFT SWP #10 SFT + }
%ROR { DUP #70 SFT SWP #01 SFT + }
%ROL2 { DUP2 #0f SFT2 SWP2 #10 SFT2 ++ }
%ROR2 { DUP2 #f0 SFT2 SWP2 #01 SFT2 ++ }
</pre>

<h3>Signed Opcodes</h3>

<pre>
%LTS2 { #8000 ++ SWP2 #8000 ++ >> }
%GTS2 { #8000 ++ SWP2 #8000 ++ << }
%ABS2 { #0000 OVR2 #0f EQU JMP SWP2 SUB2 }
</pre>

<h3>Modulo/MinMax</h3>

<pre>
%MOD  { DIVk MUL SUB }
%MOD2 { DIV2k MUL2 SUB2 }
%MIN2 { LTH2k JMP SWP2 POP2 }
%MAX2 { GTH2k JMP SWP2 POP2 }
</pre>

<h3>ASCII</h3>

<p>To test for character types.</p>

<pre>
%IS-UC { DUP #40 > SWP #5b < AND }
%IS-LC { DUP #60 > SWP #7b < AND }
%IS-NUM { DUP #2f > SWP #3a < AND }
</pre>

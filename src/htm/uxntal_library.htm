<h2>A collection of commonly used routines in Uxntal projects.</h2>

<p>The following snippets are in the standard format. If you discover faster and smaller helpers, please get in touch with me.</p>

<h3>Numbers</h3>

<p>To emit hexadecimal numbers:</p>
<pre>
@print ( short* -- )

	SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO

JMP2r
</pre>

<p>To emit a hexadecimal number, without leading zeroes:</p>

<p>To emit a decimal number from a short:</p>
<pre>
@print-hex-pp ( short* -- )

	#00 ,&z STR
	,&parse JSR
	,&parse JSR
	,&parse JSR
	,&parse JSR POP2

JMP2r
	&parse
		OVR #04 SFT DUP [ LIT &z $1 ] EQU ,&skip JCN
			#ff ,&z STR DUP #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO
			&skip
		POP #40 SFT2
	JMP2r
</pre>

<p>To emit a decimal number from a short, without leading zeroes:</p>
<pre>
@print-dec ( short* -- )

	#00 ,&z STR
	#2710 ,&parse JSR
	#03e8 ,&parse JSR
	#0064 ,&parse JSR
	#000a ,&parse JSR
	NIP
	&emit
		DUP [ LIT &z $1 ] EQU ,&skip JCN
			#ff ,&z STR DUP #30 ADD #18 DEO
			&skip
	POP

JMP2r
	&parse
		DIV2k DUP ,&emit JSR MUL2 SUB2
	JMP2r
</pre>

<p>To convert a decimal string to a hexadecimal value.</p>
<pre>
@sdec ( addr* -- hex* )

	LIT2r 0000
	&while
		LDAk #30 SUB #00 SWP
		STH2r #000a MUL2 ADD2 STH2
		INC2 LDAk ,&while JCN
	POP2
	STH2r

JMP2r
</pre>

<h3>Strings</h3>

<p>To emit a string.</p>
<pre>
@print-str ( str* -- )

	&while
		LDAk #18 DEO
		INC2 LDAk ,&while JCN
	POP2

JMP2r
</pre>

<p>Helpers for strings.</p>

<pre>
@scap ( str* -- end* ) LDAk #00 NEQ JMP JMP2r &w INC2 LDAk ,&w JCN JMP2r
@spop ( str* -- ) LDAk ,&n JCN POP2 JMP2r &n ,scap JSR #0001 SUB2 #00 ROT ROT STA JMP2r
@sput ( chr str* -- ) ,scap JSR STA JMP2r
@slen ( str* -- len* ) DUP2 ,scap JSR SWP2 SUB2 JMP2r
@scat ( src* dst* -- ) DUP2 ,slen JSR ADD2
@scpy ( src* dst* -- ) STH2 &w LDAk STH2kr STA INC2r INC2 LDAk ,&w JCN POP2 #00 STH2r STA JMP2r
@scmp ( a* b* -- f ) STH2 &l LDAk LDAkr STHr ANDk #00 EQU ,&e JCN NEQk ,&e JCN POP2 INC2 INC2r ,&l JMP &e NIP2 POP2r EQU JMP2r
</pre>

<h3>Memory</h3>

<p>To print an entire page of memory:</p>
<pre>
@print-mem ( addr* -- )

	STH2
	#0000
	&loop
		#00 OVR STH2kr ADD2 LDA ,print/byte JSR
		DUP #0f AND #0f NEQ #16 MUL #0a ADD #18 DEO
		INC NEQk ,&loop JCN
	POP2
	POP2r

JMP2r
</pre>

<p>Helpers for memory.</p>

<pre>
@mclr ( src* len* -- ) OVR2 ADD2 SWP2 &l STH2k #00 STH2r STA INC2 GTH2k ,&l JCN POP2 POP2 JMP2r
@mcpy ( src* dst* len* -- ) SWP2 STH2 OVR2 ADD2 SWP2 &l LDAk STH2kr STA INC2r INC2 GTH2k ,&l JCN POP2 POP2 POP2r JMP2r
@msfl ( a* b* len* -- ) STH2 SWP2 EQU2k ,&e JCN &l DUP2k STH2kr ADD2 LDA ROT ROT STA INC2 GTH2k ,&l JCN POP2 POP2 &e POP2r JMP2r
@msfr ( a* b* len* -- ) STH2 EQU2k ,&e JCN &l DUP2 LDAk ROT ROT STH2kr ADD2 STA #0001 SUB2 LTH2k ,&l JCN POP2 POP2 &e POP2r JMP2r
</pre>

<p>To shift part of a string using a signed short.</p>

<pre>
@ssft ( str* len* -- )

    STH2 DUP2k ;slen JSR2 ADD2 STH2r
    DUP2 #8000 GTH2 ,&l JCN
    ORAk ,&r JCN
    POP2 POP2

JMP2r
    &l #8000 SWP2 SUB2 #8000 ADD2 ;msfl JSR2 JMP2r
    &r ;msfr JSR2 JMP2r
</pre>

<h3>Random</h3>

<pre>
@prng-init ( -- )

	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour   DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour   DEI #04 SFT2
	#00 .DateTime/day    DEI #10 SFT2 EOR2
	#00 .DateTime/month  DEI #60 SFT2 EOR2
		.DateTime/year  DEI2 #a0 SFT2 EOR2 ,prng/y STR2

JMP2r

@prng ( -- number* )

	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP

JMP2r
</pre>

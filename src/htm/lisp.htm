<h2>Lisp is a family of programming languages recognizable by its iconic
parenthesized prefix notation.</h2>

<p>Operations in Lisp use the format <code>(* 5 5)</code>, as opposed to the
infix <a href='notation.html'>notation</a> <code>(5 * 5)</code>. A pair of parentheses indicates one step
of calculation.</p>

<figure>
	<img src='../media/refs/vogue-lisp.jpg' width='300'/>
	<figcaption>&mdash; Typical Lisp Programmer</figcaption>
</figure>

<p>A function name comes after the open parenthesis followed by
arguments. Atoms are tokens in a list separated by spaces, tabs and
newlines.</p>

<h3>Data Types</h3>

<p>A <b>number</b> is a signed integer in a machine specific finite range, and the
representation of a number is a seq uence of decimal digits, optionally
preceded by a sign.</p>

<pre>
45
+137
-27</pre>

<p>A <b>symbol</b> is represented by a finite sequence of characters, it is not possible
for the user to type symbols which begin as though they were numbers, although
digits may appear later in a symbol that begins with, say, a letter. </p>

<pre>
Hello
Hello-world
x32 </pre>

<p>A <b>pair</b> consists of two component called the head and the tail. The
components of a pair may be any type of value, including pairs, so that pairing
may be used to construct arbitrarily large data structures. </p>

<pre>
( 45 . Hello )
( foo . bar )
( -12 . ( 34 . 56 ) )
</pre>

<p>A <b>function</b> is a value which may be applied to arguments, to yield a
value which depends only on the function and the arguments to which it is
applied. Given an expression, <b>quote</b> returns that expression as a value.</p>

<pre>
(QUOTE 12)
(REM (QUOTE 19) (QUOTE 24))
(MUL (QUOTE 2) (ADD (QUOTE 1) X))
</pre>

<h3>Built-ins</h3>

<p>A <b>lambda</b> expression allows to name sub-expressions, given an argument list and an expression, returns them as a function.:</p>

<pre>
(LAMBDA (X Y) (ADD X Y))
</pre>

<p>Alternatively, the <b>let</b> expression can also associate a name to an
expression, given an expression with declarations (as named expressions visible
in the expression) returns its value:</p>

<pre>
(LET (QUOTE (aleph 1234)))
</pre>

<p>The following expression has value <b>True(T)</b> if the value of the
expression is an <b>atom</b>, a number or a symbol, or has value
<b>False(F)</b> otherwise. </p>

<pre>(ATOM (QUOTE 123))</pre>

<p>The <b>equality</b> of two atomic expressions may be tested by an expression
of the following form, and result in a value either T or F provided that the
values of the expressions being compared are both atoms, and either they are
both the same number, or they are both the same symbol:</p>

<pre>
(LAMBDA (X) (EQ (QUOTE foo) X))
</pre>

<p>Given three expressions returns the value of the second if the value of the
first is True, otherwise returns the value of the third.</p>

<pre>
(IF 
	(EQ (QUOTE 16) X)
	(QUOTE EQUAL16)
	(QUOTE NOT-EQUAL16))
</pre>

<img src='../media/refs/sexp.png'/>

<h3>Summary</h3>
<ul>
	<li><b>car</b>: Returns a pair's first value.</li>
	<li><b>cdr</b>: Returns a pair's second value.</li>
	<li><b>atom</b>: Returns T if its value is atomic.</li>
	<li><b>cons</b>: Returns a value pair consisting of two expressions.</li>
	<li><b>eq</b>: Returns T if two expressions are equal.</li>
	<li><b>add</b>: Returns the sum of two numeric values.</li>
	<li><b>sub</b>: Returns the difference of two numeric values.</li>
	<li><b>mul</b>: Returns the product of two numeric values.</li>
	<li><b>div</b>: Returns the quotient of two numeric values.</li>
	<li><b>rem</b>: Returns the remainder of two numeric values.</li>
	<li><b>leq</b>: Returns T if the first value is less or equal to the second.</li>
</ul>

<q>Writing eval required inventing a notation representing Lisp functions as
Lisp data, and such a notation was devised for the purposes of the paper with
no thought that it would be used to express Lisp programs in practice. </q>

<img src='../media/refs/fib.png' width='400'/>

<ul>
	<li><a href='http://www.shido.info/lisp/idx_scm_e.html' target='_blank'>Scheme Tutorial</a></li>
	<li><a href='http://lib.store.yahoo.net/lib/paulgraham/jmc.lisp' target='_blank'>Lisp Eval</a></li>
	<li><a href='http://www.cb1.com/~john/thesis/thesis.html' target='_blank'>A Lisp through the Looking Glass</a></li>
</ul>

<img src='../media/refs/lmi.png' width='100'/>


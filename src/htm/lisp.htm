<h2>Lisp is a family of programming languages with a long history and a distinctive, fully parenthesized prefix notation.</h2>

<p>Lisp follows the <i>Prefix Notation</i>, where operations use the format <code>(* 5 5)</code> instead of <code>(5 * 5)</code>. A pair of parentheses indicates one step of calculation. A function name comes after the open parenthesis followed by arguments. Atoms are tokens in a list separated by spaces, tabs and newlines.</p>

<figure>
	<img src='../media/refs/vogue-lisp.jpg' width='300'/>
	<figcaption>&mdash; Typical LISP Programmer</figcaption>
</figure>

<h3>Variables</h3>

<p>To define a variable, use <code>define</code>, to print the value of an expression, use <code>display</code>.</p>

<pre>
(define color "red")
(display color)
</pre>

<h3>Functions</h3>

<p>To define a function, use <code>define</code>, to add parameters to the function, use <code>lambda</code>. The following functions can thereafter be used like <code>(greet "Alex")</code>.</p>

<pre>
(define greet (lambda (name)
	(string-append "Hello " name "!")))
</pre>

<p>Another example:</p>

<pre>
(define add-three (lambda (a b c)
	(+ a b c)))
</pre>

<p>The previous example can also be defined using the following short-form:</p>

<pre>
(define (add-three a b c)
	(+ a b c))
</pre>

<h3>Eval/Apply</h3>

<p><b>apply</b> applies a function to some arguments:</p>

<pre>(apply + 1 2 3) => 6</pre>

<p><b>eval</b> evaluates an expression:</p>

<pre>(eval '(+ 1 2 3)) => 6</pre>

<h3>List</h3>

<p>You can create a list of items, and access items in the list by id:</p>

<pre>
(define colors 
	(list red yellow green cyan))
(list-ref colors 2) ; yellow
</pre>

<h3>Logic</h3>

<p>Logic operations are in the format of <code>(if true this that)</code> where the result of the operation will be <code>this</code> if the second parameter is <code>true</code>, otherwise will be <code>that</code>. In Scheme, true is indicated as <code>#t</code>, and falseis indicated as <code>#f</code>.</p>

<pre>
(define (min a b) 
	(if (< a b) a b))
</pre>

<h4>Compare</h4>

<table border="1">
	<tr><th><code>eq?</code></th><td>Compares addresses of two objects and returns #t if they are same.</td></tr>
	<tr><th><code>eqv?</code></th><td>Compares types and values of two object stored in the memory space and returns #t if they are same.</td></tr>
	<tr><th><code>equal?</code></th><td>Compares sequences such as list or string and returns #t if they are same.</td></tr>
</table>

<q>The reports of my death are greatly exaggerated.</q>

<h2>Cons</h2>

<p>Cons is a fundamental function, <code>(cons x y)</code>, which stands for <b>constructs memory objects</b> and holds two values or pointers to values. The resulting pair has a left half, referred to as the car (the first element, or contents of the address part of register), and a right half (the second element, or contents of the decrement part of register), referred to as the cdr. </p>

<p>Although cons cells can be used to hold ordered pairs of data, they are more commonly used to construct more complex compound data structures, notably lists and binary trees. For example, the Lisp expression <code>(cons 1 2)</code> constructs a cell holding 1 in its left half (the so-called <b>car</b> field) and 2 in its right half (the <b>cdr</b> field). In Lisp notation, the value (cons 1 2) looks like: </p>

<table border='1'>
	<tr><td>A list</td><td>(cons 42 (cons 69 (cons 613 nil)))</td><td>(list 42 69 613)</td></tr>
	<tr><td>A tree</td><td>(cons (cons 1 2) (cons 3 4))</td><td></td></tr>
</table>

<h3>Maxwell's equations of software</h3>

<p>Alan Kay has famously described Lisp as the <i>Maxwell's equations of software</i>. </p>

<article>
	<p><b>Alan Kay</b>: Yes, that was the big revelation to me when I was in graduate school—when I finally understood that the half page of code on the bottom of page 13 of the Lisp 1.5 manual was Lisp in itself. These were “Maxwell’s Equations of Software!” This is the whole world of programming in a few lines that I can put my hand over.</p>
	<p>I realized that anytime I want to know what I’m doing, I can just write down the kernel of this thing in a half page and it’s not going to lose any power. In fact, it’s going to gain power by being able to reenter itself much more readily than most systems done the other way can possibly do.</p>
</article>

<img src='../media/refs/lisp-maxwells.png'/>

<ul>
	<li><a href='http://www.shido.info/lisp/idx_scm_e.html' target='_blank'>Scheme Tutorial</a></li>
	<li><a href='http://lib.store.yahoo.net/lib/paulgraham/jmc.lisp' target='_blank'>Lisp Eval</a></li>
	<li><a href='http://norvig.com/lispy.html'>Lispy</a></li>
	<li><a href='http://buildyourownlisp.com' target='_blank'>Build Your Own Lisp</a></li>
</ul>


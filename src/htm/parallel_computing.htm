<h2>Computation in which many calculations are carried out simultaneously.</h2>

<p>A concurrent program needs to perform several possibly unrelated tasks at the same time. In contrast, a parallel program solves a single problem.</p>

<p>By definition, a concurrent program deals continuously with networking protocols, databases, and the like. A typical parallel program is likely to be more focused: it streams data in, crunches it for a while (with little further I/O), then streams data back out.</p>

<p>There are many aspects to the parallel execution of a program: threads are created, execute on a processor, transfer data to and from remote processors, and synchronise with other threads. Managing all of these aspects on top of constructing a correct and efficient algorithm is what makes parallel programming so hard.</p>

<p><b>Divide & Conquer</b>: To solve a large instance of a problem, break it into smaller instances of the same problem, and use the solutions of these to solve the original problem. The branching factor of a divide-and-conquer algorithm is the number of subproblems into which a problem is divided. A divide-and-conquer algorithm is balanced if it divides the initial problem into equally-sized subproblems.</p>

<ul>
	<li><a href='https://yosefk.com/blog/parallelism-and-concurrency-need-different-tools.html' target='_blank'>Parallelism and concurrency need different tools</a></li>
	<li><a href='https://book.realworldhaskell.org/read/concurrent-and-multicore-programming.html' target='_blank'>Concurrent and multicore programming</a>, Haskell</li>
</ul>


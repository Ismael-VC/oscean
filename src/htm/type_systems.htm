<h2>Types are a way to suggest or restrict the activities possible for an object of that type.</h2>

<p>A type system defines how a programming language classifies values and expressions into types, how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Type inference refers to the automatic detection of the type of an expression.</p>

<p>Weak typing allows a value of one type to be treated as another, for example treating a string as a number. Strong typing raises an error on attempts to perform an operation on the wrong type of value.</p>

<h3>Type Inference in Stack-Based Programming Languages</h3>

<p>In an applicative language, things are evaluated by applying functions to arguments. This includes almost all programming languages in wide use, such as C, Python, ML, Haskell, and Java. In a <a href='https://concatenative.org/wiki/view/Concatenative%20language' target='_blank'>concatenative programming language</a>, things are evaluated by composing several functions which all operate on a stack, passed from function to function.</p>

<p>Type inference in stack-based programming language is done by checking the stack effect declarations of words before they can be run, against the cummulative stack state of each item in the the definition of each word.</p>

<pre>
pop ( 1 -- )
swap ( 1 2 -- 2 1 )
</pre>

<p>Words that do not pass the stack checker are rejected and cannot be run, and so essentially this defines a very simple and permissive type system that nevertheless catches some invalid programs and enables compiler optimizations. </p>

<p>The simplest case is when a piece of code does not have any branches or recursion, and just pushes literals and calls words. Pushing a literal has stack effect <code>( -- x )</code>. The stack effect of most words is always known statically from the declaration.</p>

<ul>
	<li><a href='http://joypy.osdn.io/notebooks/Types.html' target='_blank'>The Blissful Elegance of Typing Joy</a></li>
	<li><a href='https://www2.ccs.neu.edu/racket/pubs/dissertation-kleffner.pdf' target='_blank'>A foundation for typed concatenative languages</a>, Rob Kleffner</li>
	<li><a href='https://prl.khoury.northeastern.edu/blog/static/stack-languages-talk-notes.pdf' target='_blank'>Talk Notes</a>, Rob Kleffner</li>
</ul>


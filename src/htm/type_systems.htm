<h2>Types are a way to suggest or restrict the activities possible for an object of that type.</h2>

<p>A type system defines how a programming language classifies values and expressions into types, how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Type inference refers to the automatic detection of the type of an expression.</p>

<p>Weak typing allows a value of one type to be treated as another, for example treating a string as a number. Strong typing raises an error on attempts to perform an operation on the wrong type of value.</p>

<h3>Type Inference in Stack-Based Programming Languages</h3>

<p>In an applicative language, things are evaluated by applying functions to arguments. This includes almost all programming languages in wide use, such as C, Python, ML, Haskell, and Java. In a <a href='https://concatenative.org/wiki/view/Concatenative%20language' target='_blank'>concatenative programming language</a>, things are evaluated by composing several functions which all operate on a stack, passed from function to function.</p>

<p>Stack effects are declared in the format: </p>

<pre>
pop ( 1 -- )
swap ( 1 2 -- 2 1 )
</pre>

<p>Type inference in stack-based programming language is done by checking the stack effect declarations of words before they can be run, against the cummulative stack state of each item in the the definition of each word.</p>

<ul>
	<li><a href='http://joypy.osdn.io/notebooks/Types.html' target='_blank'>The Blissful Elegance of Typing Joy</a></li>
	<li><a href='https://prl.khoury.northeastern.edu/blog/static/stack-languages-talk-notes.pdf' target='_blank'>Talk Notes</a>, Rob Kleffner</li>
</ul>


<h2>Uxntal Modes</h2>

<p>Each opcode has 3 possible modes, which can combined:</p>

<ul>
	<li>The <b>short mode</b> <kbd>2</kbd> operates on shorts, instead of bytes.</li>
	<li>The <b>keep mode</b> <kbd>k</kbd> operates without consuming items.</li>
	<li>The <b>return mode</b> <kbd>r</kbd> operates on the return stack.</li>
</ul>

<table border='1' style='float:right'>
	<tr><th colspan='8'>INC2r</th></tr>
	<tr><th>k</th><th>r</th><th>2</th><th colspan='5'>opcode</th></tr>
	<tr><td>0</td><td style='background:#eee'>1</td><td style='background:#eee'>1</td>
	<td>0</td><td>0</td><td>0</td><td>0</td><td style='background:#eee'>1</td></tr>
</table>

<p>By default, operators consume bytes from the working stack, notice how in the following example only the last two bytes <code>#45</code> and <code>#67</code> are added, even if there are two shorts on the stack.</p>
<pre>#1234 #4567 ADD<span style='float:right'>12 34 ac</span></pre>

<p>The <b>short mode</b> consumes two bytes from the stack. In the case of jump opcodes, the short-mode operation jumps to an absolute address in memory. For the memory accessing opcodes, the short mode operation indicates the size of the data to read and write.</p>
<pre>#1234 #4567 ADD2 <span style='float:right'>57 9b</span></pre>

<p>The <b>keep mode</b> does not consume items from the stack, and pushes the result on top. The following example adds the two shorts together, but does not consume them. Under the hood, the keep mode keeps a temporary stack pointer that is decremented on <code>POP</code>.</p>
<pre>#1234 #4567 ADD2k <span style='float:right'>12 34 45 67 57 9b</pre>

<p>The <b>return mode</b> makes it possible for any opcode to operate on the return-stack directly. For that reason, there is no dedicated return opcode. For example, the <code class='op'>JSR</code> opcode pushes the program's address onto the return stack before jumping, to return to that address, the <code class='op'>JMP2r</code> opcode is used, where instead of using the address on the working-stack, it takes its address from the return-stack.</p>
<pre>LITr 12 #34 STH ADDr STHr <span style='float:right'>46</span></pre>

<p>To better understand how the opcode modes are used, here is a 22 bytes long implementation of the function to generate numbers in the <a href='https://en.wikipedia.org/wiki/Fibonacci_Sequence' target='_blank'>Fibonacci sequence</a>. Notice how only a single literal is created to perform the operation.</p>

<pre>
@fib ( num -- numfib* )
	#0001 GTH2k ?&ok
		POP2 JMP2r &ok
	SUB2k fib STH2 INC2
	SUB2 fib STH2r
		ADD2
JMP2r</pre>

<img src="../media/generic/uxn.crew.png" width="400"/>


<h2>Interaction nets are a graphical model of computation.</h2>

<p>The following graphics are taken from Yves Lafont's paper <a href='https://raw.githubusercontent.com/cicada-lang/inet/master/docs/papers/interaction-combinators.pdf' target='_blank'>Interaction Combinators</a>. This page was only created to serve as a superficial but gentle introduction to the topic.</p>

<p>An <b>agent</b> is a cell drawn as shape(<i>a</i>) with one principal port and auxiliary ports(<i>n</i>).</p>

<img src='../media/refs/in_cell.png' width='350'/>

<p>A <b>net</b> is a graph of cells and where each port is connected to another one by means of a <b>wire</b>. The following net has three free ports, <i>x</i>, <i>y</i>, and <i>z</i>. Note that a wire may connect two ports of the same cell.</p>

<img src='../media/refs/in_net.png' width='300'/>

<h3>Addition</h3>

<p>An unary operation is an operation with only a single input. Examples of unary operations are: increment, decrement, absolute, not, etc.. The successor operation(S) just sends a natural number to the next one.</p>

<img src='../media/refs/in_ari.png' width='450'/>

<p>Since addition and multiplication are defined by induction on their first argument, we shall always plug this argument into the principal port.</p>

<pre>
sx + y = s(x + y)                  0 + y = y
</pre>
<img src='../media/refs/in_add.png' width='450'/>

<h3>Multiplication</h3>

<p>When defining multiplication, note that the argument <i>y</i> is used twice in the first equation, and it is not used at all in the second one. For that reason, two extra symbols areneeded <i>duplicate</i> and <i>erase</i>. </p>

<pre>
sx * y = (x + y) + y              0 * y = 0
</pre>
<img src='../media/refs/in_mul.png' width='450'/>

<p>The idea is that a net representing a natural number should be duplicated when it is connected to the principal port of a <i>duplicate</i>, and it should be erased when it is connected to the principal port of an <i>erase</i>.</p>

<img src='../media/refs/in_dupera.png' width='450'/>

<p>The system of interaction combinators consists of three symbols, called combinators: <i>y</i>(constructor), <i>d</i>(duplicator), and <i>e</i>(eraser). The six interaction rules below are of two kinds: commutation when the two cells carry different symbols (<i>yd</i>, <i>ye</i>, <i>de</i>) and annihilation when they carry the same symbol (<i>yy</i>, <i>dd</i>, <i>ee</i>).</p>

<img src='../media/refs/in_comb.png' width='800' style='max-width:800px'/>

<p>Note that the annihilations for <i>y</i> and <i>d</i> are not the same. Furthermore, if one numbers the auxiliary ports, one realizes that it is <i>yy</i>, not <i>dd</i>, which exchanges the ports:</p>

<img src='../media/refs/in_swp.png' width='450'/>

<ul>
	<li><a href='https://github.com/inpla/inpla' target='_blank'>Inpla</a>, Interaction Nets as Programming Language</li>
	<li><a href='https://arxiv.org/pdf/1505.07164.pdf' target='_blank'>An Implementation Model for Interaction Nets</a></li>
	<li><a href='https://github.com/cicada-lang/inet' target='_blank'>Interaction Nets Playground</a></li>
	<li><a href='https://github.com/asperti/BOHM1.1' target='_blank'>Bologna Optimal Higher-Order Machine</a></li>
</ul>


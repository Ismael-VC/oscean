<h2>GLY is a 1-bit inline graphic format.</h2>

<p>Gly is an <a href='https://www.youtube.com/watch?v=L8d-lTMighY' target='_blank'>inline graphics</a> format, similar to <a href='sixel_format.html'>sixels</a>, used to draw 1-bit graphics in text files from visible <a href='ascii.html'>ASCII</a> characters, in which each character represents 4 vertical pixels on 16 pixels high columns. Gly assets are supported by <a href='left.html'>Left</a>, and can be generated in <a href='noodle.html'>Noodle</a>.</p>

<table border='1'>
	<tr><td colspan='2'>ascii</td><td colspan='2'>y*4</td><td colspan='4'>4 pixels</td></tr>
	<tr><td style='background:black;color:white'>0</td><td style='background:black;color:white'>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>

<p>The format resides entirely in the first half of the ascii table, or below 0x80. At the end of each row, <code>0x0a</code> denotes the end of a line. For example, a 32px high sprite, will have two line breaks. The Y position is set in increments of 4 pixels vertically for a total of 16 vertical pixels, the <code>0x20</code> advances the rendering by 1 pixel horizontally. </p>

<ul>
	<li><kbd>0x0a</kbd> Line Feed</li>
	<li><kbd>0x20</kbd> x+1</li>
	<li><kbd>#1</kbd> Color1</li>
</ul>

<h3>GLY Example</h3>

<p>Each line begins with an escape code, the escape code is not display at the start of each line in the following example.</p>

<table border='1'>
	<th colspan="2">32x32 Sprite</th>
	<tr>
		<td width='60'>
			<img src='../media/generic/boxgly.png'/></td>
		<td>
GOboa CWao ASao @Ua} NVao Va{ GTaq CTa{ ATao @Ta} @Tao @Ta} @Tao @Ta{ @Taq @Ta{ @Tao @Ta} @Tao @Tao @Tao @Tm~ @Tdo @\go @T_p @R_q @P_p HQgo DSk~ BWao @O`o<br />
O_w O_w O_w HVkw Oax GVkw @O_w Rmx GS_w @Rkw Oax HVkw O_w GVkw @Oax Rkw GS_w @Rmx O_w O_w O_w N^n~ O_s O_q O_p Ogo Oco Oao N^`o O_o O_o 
		</td>
	</tr>
</table>

<h3>Implementation</h3>

<p>Draw a gly string in <a href='uxntal.html'>Uxntal</a> with the screen's <a href='varvara.html'>auto byte</a> is set to <code>auto-y(0x02)</code>:</p>

<pre>
@draw-gly ( chr -- )

	( cmds )
	LDAk #20 NEQ ?&no-x .Screen/x DEI2k INC2 ROT DEO2 INC2 &no-x
	LDAk #20 LTH ?&end
	( opcode )
	LDAk LIT "? SUB STH
	.Screen/y DEI2
	#00 STHkr #30 AND #24 SFT OVR2 ADD2 .Screen/y DEO2
	#0400
	&loop
		STHkr OVR SFT #01 AND .Screen/pixel DEO
		INC GTHk ?&loop
	POP2 POPr
	.Screen/y DEO2
	INC2 !&w

JMP2r
</pre>

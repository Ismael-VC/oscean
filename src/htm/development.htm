<h2>Improvement means deterioration.</h2>


<h3>programming practices</h3>
<ul>
	<li>Prototype before polishing. Get it working before optimizing it.</li>
	<li>Separate policy from mechanism, separate interfaces from engines.</li>
	<li>Write simple modular parts connected by clean interfaces.</li>
	<li>Design programs to be connected to other programs.</li>
	<li>Write programs to write programs when you can.</li>
	<li>Design for the future, because it will be here sooner than you think.</li>
	<li>In interface design, always do the least surprising thing.</li>
	<li>When a program has nothing surprising to say, it should say nothing.</li>
	<li>When a program must fail, it should fail noisily and as soon as possible.</li>
	<li>Write big programs only when it is clear by demonstration that nothing else will do.</li>
	<li>Consider how you would solve your immediate problem without adding anything new.</li>
</ul>


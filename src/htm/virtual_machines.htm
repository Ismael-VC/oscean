<h2>A virtual machine is a program that acts like a computer.</h2>

<p>It simulates the instructions of a processor along with a few other hardware components, allowing it to perform arithmetic, read and write to memory, and interact with I/O devices, just like a physical computer. Most importantly, it can understand a machine language which you can use to program it.</p>

<p>Virtual machines provide an intermediate language stage for compilation. They bridge the gap between the high level of a programming language and the low level of a real machine. The instructions of an abstract machine are tailored to the particular operations required to implement operations of a specific source language or class of source languages.</p>

<img src='../media/refs/fam.png'/>

<p>A bedrock abstraction level is found in every human system.  No recoverable failure, no matter how catastrophic, will ever demand intelligent intervention below it. When an application crashes, it might leave behind a core dump but never a "logic gate dump" and certainly not a "transistor dump."  Logic gates and transistors lie well below the bedrock abstraction level of any ordinary computer. <a href='http://www.loper-os.org/?p=55' target="_blank">~</a></p>

<p>To experiment with computing from first principles, have a look at the <a href='paper_computer.html'>paper computer</a>.</p>

<ul>
	<li><a href='https://sbtcvm.blogspot.com' target='_blank'>sbtcvm</a></li>
	<li><a href='https://www.rw.cdl.uni-saarland.de/people/diehl/private/pubs/articleDiehlHartelSestoft.pdf' target='_blank'>Abstract machines for programming language implementation</a></li>
</ul>


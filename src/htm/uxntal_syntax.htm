<h2>Uxntal Syntax</h2>

<p>In <a href='https://concatenative.org/wiki/view/Concatenative%20language'
target='_blank'>concatenative programming</a>, there are no precedence rules,
the calculations are merely performed in the sequence in which they are
presented. The order with which elements come off a stack is known as <b>last
in, first out</b>. In the stack <i>a b c</i>, the <i>c</i> item was the last to
be added, and will be the first to be removed.</p>

<pre>
#01 DUP ADD #03 MUL<span style='float:right'>06</span>
</pre>

<p>Uppercased opcodes are reserved words, lowercase hexadecimal numbers are bytes
and shorts, parentheses are comments, curlies are <a
href='uxntal_lambdas.html'>lambdas</a>, and square brackets are used for
organization. Runes are special characters at the start of a word that define
its meaning, here is the full list:</p>

<table border="1">
	<tr><th colspan="4">Padding Runes</th><th colspan="4">Literal Hex Rune</th></tr>
	<tr><td><code>|</code></td><td>absolute</td><td><code>$</code></td><td>relative</td><td><code>#</code></td><td colspan="3">literal hex</td></tr>
	<tr><th colspan="4">Label Runes</th><th colspan="4">Ascii Runes</th></tr>
	<tr><td><code>@</code></td><td>parent</td><td><code>&</code></td><td>child</td><td><code>&quot;</code></td><td colspan="3">raw ascii</td></tr>
	<tr><th colspan="4">Addressing Runes</th><th colspan="4">Pre-processor Runes</th></tr>
	<tr><td><code>,</code></td><td>literal relative</td><td><code>_</code></td><td>raw relative</td><td><code>%</code></td><td>macro-define</td><td><code>~</code></td><td>include</td></tr>
	<tr><td><code>.</code></td><td>literal zero-page</td><td><code>-</code></td><td>raw zero-page</td></tr>
	<tr><td><code>;</code></td><td>literal absolute</td><td><code>=</code></td><td>raw absolute</td></tr>
	<tr><th colspan="4">Immediate Runes</th></tr>
	<tr><td><code>!</code></td><td>jmi</td><td><code>?</code></td><td>jci</td></tr>
</table>

<h3>Introduction</h3>

<p>The first line of the following example begins with the <b>absolute padding</b>
token <kbd>|10</kbd> which moves the program writing location to the address 0x0010,
and will allow us to define <kbd>@labels</kbd> and <kbd>&sublabels</kbd> for
the various ports of the <a href='varvara.html#console'>Console device</a> so
that we can reference them in our code by name. To learn more, see <a
href='uxntal_struct.html'>Uxntal Structs</a>.</p>

<iframe src="../etc/uxnrepl/index.html" frameborder="0" style='overflow: hidden; height: 450px; margin-bottom: 15px; border: 1px solid #000; border-radius: 3px;'></iframe>

<style>
.example span.label { font-weight: bold;background: #fff;color: #000;padding: 2px 4px; }
.example span.comment { color:#777 }
</style>

<p>The second segment moves the program location to the address 0x0100, which is
where the first page of memory ends, and <a href='uxntal_memory.html'>where all
Uxn programs begin</a>. Next is a <b>comment</b>, the arrow symbol indicates
that the following operation is a <a href='uxntal_devices.html'>vector</a>, and
will terminate with <kbd>BRK</kbd>. To learn more, see <a
href='uxntal_notation.html'>Uxntal Notation</a>.</p>

<p>The <kbd>;hello-world</kbd> token pushes an <b>absolute address</b>, made of
two bytes, onto the stack and which points to a series of characters in memory.
A hexadecimal number or label pushed to the stack in this fashion is called a
<b>literal</b>, as opposed to a value stored in memory. Next, we call the
<kbd>@print-text</kbd> routine.</p>

<p>Both <kbd>&while</kbd> and <kbd>@while</kbd> are ways to define <b>labels</b>,
but using the ampersand rune will prefix our new label with the name of the
last parent label, creating <kbd>@print-text/while</kbd>. </p>

<p>Next, the <kbd>LDAk</kbd> opcode copies the absolute address on the stack, and
loads the byte in memory found at that address to the top of the stack, in this
case, the <a href='ascii.html'>ASCII</a> value of the letter H. That value is
sent to the <a href='varvara.html#console'>device port #18</a> with
<kbd>DEO</kbd>, defined by our Console label and its sublabels, which prints
that character to the terminal.</p>

<p>We increment the absolute address found on top of the stack with
<kbd>INC2</kbd>, because the address is made of two bytes. We load the
incremented value, next we do a conditional immediate jump with
<kbd>?&while</kbd> for as long as the item on the stack is not zero. We use
<kbd>POP2</kbd> to remove the address on the stack and keep the stack clean at
the end of the subroutine.</p>

<p>Lastly, we encounter <kbd>JMP2r</kbd> which jumps to the absolute address
that we left on the return stack when we entered the <kbd>@print-text</kbd>
subroutine.</p>

<img src="../media/generic/uxn.team.png" style="margin:0 auto 30px" width="300">


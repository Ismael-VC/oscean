<h2>Uxntal syntax</h2>

<p>Uppercased opcodes are reserved words, hexadecimal bytes and shorts are always lowercase. Comments are within parentheses, and the square brackets are ignored.</p>

<iframe src="../etc/uxnrepl/index.html" frameborder="0" style='overflow:hidden; height:400px; margin-bottom:15px'></iframe>

<style>
.example span.label { font-weight: bold;background: #fff;color: #000;padding: 2px 4px; }
.example span.comment { color:#777 }
</style>

<p>The first token in this program is the padding operation <kbd>|0100</kbd>, which is where the first page of memory ends, and where all Uxn programs begin. We, then, push the absolute address of the label <kbd>@hello-world</kbd> to the stack, which points to a series of characters in memory.</p>

<img src="../media/generic/uxn.team.png" style="margin:0 auto 30px" width="250">

<p>Next, we jump to the <kbd>@print-text</kbd> subroutine, while also leaving a return address onto the return stack.</p>

<p>Both <kbd>&while</kbd> and <kbd>@while</kbd> are ways to define labels, but using <code>&while</code> will automatically prefix our new label with the name of the last <code>@label</code>, in this example <code>print-text/while</code>. </p>

<table border="1">
	<tr><th colspan="4">Padding Runes</th><th colspan="4">Literal Hex Rune</th></tr>
	<tr><td><code>|</code></td><td>absolute</td><td><code>$</code></td><td>relative</td><td><code>#</code></td><td colspan="3">literal hex</td></tr>
	<tr><th colspan="4">Label Runes</th><th colspan="4">Ascii Runes</th></tr>
	<tr><td><code>@</code></td><td>parent</td><td><code>&</code></td><td>child</td><td><code>&quot;</code></td><td colspan="3">raw ascii</td></tr>
	<tr><th colspan="4">Addressing Runes</th><th colspan="4">Pre-processor Runes</th></tr>
	<tr><td><code>,</code></td><td>literal relative</td><td><code>_</code></td><td>raw relative</td><td><code>%</code></td><td>macro-define</td><td><code>~</code></td><td>include</td></tr>
	<tr><td><code>.</code></td><td>literal zero-page</td><td><code>-</code></td><td>raw zero-page</td></tr>
	<tr><td><code>;</code></td><td>literal absolute</td><td><code>=</code></td><td>raw absolute</td></tr>
	<tr><th colspan="4">Immediate Runes</th></tr>
	<tr><td><code>!</code></td><td>jmi</td><td><code>?</code></td><td>jci</td></tr>
</table>

<p>Next, the <kbd>LDAk</kbd> opcode takes two bytes at the top of the stack to form an absolute address, and puts the value in memory found at that address to the top of the stack, in this case, the ASCII value of the letter H. That value is sent to Console/write(port #18) which prints that character to the terminal.</p>

<p>We increment the absolute address found on top of the stack with <kbd>INC2</kbd>, because the address is made of two bytes. We load the incremented value, we then do a conditional jump with <kbd>?&while</kbd> for as long as the item on the stack is not zero. We complete the program with <kbd>POP2</kbd> to remove the address on the stack, to keep the stack clean at the end of the program.</p>

<p>In a program, a number that will be pushed on the stack is called a <i>literal</i>. The various ways to write literals is as follow:</p>

<table border="1">
	<tr><td></td><th>Byte</th><th>Char</th><th>Relative</th><th>ZeroPage</th><th>Absolute*</th><th>Short*</th></tr>
	<tr><td><i>Literal</i></td><td><code>#ab</code></td><td></td><td><code>,label</code></td><td><code>.label</code></td><td><code>;label</code></td><td><code>#abcd</code></td></tr>
	<tr><td><i>Raw</i></td><td><code>ab</code></td><td><code>"Q</code></td><td><code>_label</code></td><td><code>-label</code></td><td><code>=label</code></td><td><code>abcd</code></td></tr>
</table>


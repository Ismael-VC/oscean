<h2>C is the native language of Unix. It has come to dominate systems programming in the computer industry.</h2>

<p>Work on the first official C standard began in 1983. The major functional additions to the language were settled by the end of 1986, at which point it became common for programmers to distinguish between "K&R C" and <a href='https://en.wikipedia.org/wiki/ANSI_C' target='_blank'>ANSI C</a>.</p>

<p>People use C because it <i>feels</i> faster. If you build a catapult that can hurl a bathtub with someone inside from London to New York, it will <i>feel very fast</i> both on take-off and landing, and probably during the ride, too, while a comfortable seat in business class on a transatlantic airliner would probably take less time but you would not <i>feel</i> the speed nearly as much. <a href='https://groups.google.com/group/comp.lang.lisp/browse_thread/thread/567df5923ced5a94/52564cc186195b05#52564cc186195b05' target="_blank">~</a></p>

<p>One good reason to learn C, even if your programming needs are satisfied by a higher-level language, is that it can help you learn to think at hardware-architecture level. For notes specific to the <a href='plan9.html'>Plan9</a>'s C compiler, see <a href='plan9_c.html'>Plan9 C</a>.</p>

<h3>Compile</h3>

<p>To convert source to an executable binary one uses a compiler. My compiler of choice is <a href='https://bellard.org/tcc' target='_blank'>tcc</a>, but more generally <a href='https://gcc.gnu.org/' target='_blank'>gcc</a> is what most toolchains will use on <a href='linux.html'>Linux</a>.</p>

<pre>cc -Wall -o main main.c</pre>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int count = 10;

int add_together(int x, int y) {
  int result = x + y;
  return result;
}

typedef struct {
  int x;
  int y;
  int z;
} point;

void print_point(point point) {
  printf("the point is: (%d,%d,%d)\n",point.x,point.y,point.z);
}

int main(int argc, char** argv) {
  point p;
  p.x = 2;
  p.y = 3;
  p.z = 4;

  float length = sqrt(p.x * p.x + p.y * p.y);

  printf("float: %.6f\n", length);
  printf("int: %d\n", p.z);

  print_point(p);

  return 0;
}
</pre>

<h3>Include</h3>

<p>Generally, projects will include <code>.h</code> files which in turn will include their own <code>.c</code> files. The following form is used for system header files. It searches for a file named <code>file</code> in a standard list of system directories. </p>

<pre>#include &lt;file&gt;</pre>

<p>The following form is used for header files of your own program. It searches for a file named <code>folder/file.h</code> in the directory containing the current file. </p>

<pre>#include "folder/file.h"</pre>

<h3>Data Types</h3>

<table border='1'>
  <tr><td>char</td><td>0xff</td><td>0-255</td></tr>
  <tr><td>short</td><td>0xffff</td><td>0-65535</td></tr>
</table>

<h3>IO</h3>

<p>One way to get input into a program or to display output from a program is to use standard input and standard output, respectively. The following two programs can be used with the unix pipe <code>./o | ./i</code></p>

<h4>o.c</h4>
<pre>
#include &lt;stdio.h&gt;

int
main()
{
  printf("(output hello)");
  return 0;
}
</pre>

<h4>i.c</h4>

<pre>
#include &lt;stdio.h&gt;

int
main()
{
  char line[256];
  if(fgets(line, 256, stdin) != NULL) {
    printf("(input: %s)\n", line);
  }
  return 0;
}
</pre>

<h3>SDL</h3>

<pre>cc demo.c -I/usr/local/include -L/usr/local/lib -lSDL2 -o demo</pre>

<p>To compile the following example, place a <code>graphic.bmp</code> file in the same location as the c file, or remove the image block.</p>

<pre>
#include &lt;SDL2/SDL.h&gt;
#include &lt;stdio.h&gt;

int
error(char* msg, const char* err)
{
  printf("Error %s: %s\n", msg, err);
  return 1;
}

int
main()
{
  SDL_Window* window = NULL;
  SDL_Surface* surface = NULL;
  SDL_Surface* image = NULL;

  if(SDL_Init(SDL_INIT_VIDEO) < 0)
    return error("init", SDL_GetError());

  window = SDL_CreateWindow("Blank Window",
                            SDL_WINDOWPOS_UNDEFINED,
                            SDL_WINDOWPOS_UNDEFINED,
                            640,
                            480,
                            SDL_WINDOW_SHOWN);

  if(window == NULL)
    return error("window", SDL_GetError());

  surface = SDL_GetWindowSurface(window);
  SDL_FillRect(surface, NULL,
               SDL_MapRGB(surface->format, 0x72, 0xDE, 0xC2));

  /* Display an image */
  image = SDL_LoadBMP("graphic.bmp");

  if(image == NULL)
    return error("image", SDL_GetError());

  SDL_BlitSurface(image, NULL, surface, NULL);

  /* Draw canvas */
  SDL_UpdateWindowSurface(window);
  SDL_Delay(2000);

  /* close */
  SDL_FreeSurface(surface);
  surface = NULL;
  SDL_DestroyWindow(window);
  window = NULL;
  SDL_Quit();

  return 0;
}

</pre>

<h3>Misc</h3>

<p>String padding: <code>|Hello     |</code></p>

<pre>
printf("|%-10s|", "Hello");
</pre>

<h3>Macros</h3>

<pre>
#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#define MAX(a, b)  (((a) > (b)) ? (a) : (b))
#define ABS(a)     (((a) < 0) ? -(a) : (a))
#define CLAMP(x, low, high)  (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
</pre>

<h2>Reserved Words</h2>

<table border='1'>
  <tr><td><code>auto</code></td><td><code>else</code></td><td><code>long</code></td><td><code>switch</code></td></tr>
  <tr><td><code>break</code></td><td><code>enum</code></td><td><code>register</code></td><td><code>typedef</code></td></tr>
  <tr><td><code>case</code></td><td><code>extern</code></td><td><code>return</code></td><td><code>union</code></td></tr>
  <tr><td><code>char</code></td><td><code>float</code></td><td><code>short</code></td><td><code>unsigned</code></td></tr>
  <tr><td><code>const</code></td><td><code>for</code></td><td><code>signed</code></td><td><code>void</code></td></tr>
  <tr><td><code>continue</code></td><td><code>goto</code></td><td><code>sizeof</code></td><td><code>volatile</code></td></tr>
  <tr><td><code>default</code></td><td><code>if</code></td><td><code>static</code></td><td><code>while</code></td></tr>
  <tr><td><code>do</code></td><td><code>int</code></td><td><code>struct</code></td><td><code>_Packed</code></td></tr>
  <tr><td><code>double</code></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<h2>Array of function pointers</h2>

<pre>
void (*fns[3])() = {fn1, fn2, fn3};
</pre>

<h2>Operators Precedence</h2>

<table border='1'>
   <tbody>
      <tr>
         <th> Precedence</th>
         <th> Operator</th>
         <th> Description</th>
         <th> Associativity</th>
      </tr>
      <tr>
         <th rowspan="6"> 1</th>
         <td> <code>++</code> <code>--</code></td>
         <td> Suffix/postfix increment and decrement</td>
         <td style="vertical-align: top" rowspan="6"> Left-to-right</td>
      </tr>
      <tr>
         <td> <code>()</code></td>
         <td> Function call</td>
      </tr>
      <tr>
         <td> <code>[]</code></td>
         <td> Array subscripting</td>
      </tr>
      <tr>
         <td> <code>.</code></td>
         <td> Structure and union member access</td>
      </tr>
      <tr>
         <td> <code>-&gt;</code></td>
         <td> Structure and union member access through pointer</td>
      </tr>
      <tr>
         <td> <code>(<i>type</i>){<i>list</i>}</code></td>
         <td> Compound literal<span class="t-mark-rev t-since-c99">(C99)</span></td>
      </tr>
      <tr>
         <th rowspan="8"> 2</th>
         <td> <code>++</code> <code>--</code></td>
         <td> Prefix increment and decrement<sup id="cite_ref-1" class="reference"><a href="#cite_note-1">[note 1]</a></sup></td>
         <td style="vertical-align: top" rowspan="8"> Right-to-left</td>
      </tr>
      <tr>
         <td> <code>+</code> <code>-</code></td>
         <td> Unary plus and minus</td>
      </tr>
      <tr>
         <td> <code>!</code> <code>~</code></td>
         <td> Logical NOT and bitwise NOT</td>
      </tr>
      <tr>
         <td> <code>(<i>type</i>)</code></td>
         <td> Cast</td>
      </tr>
      <tr>
         <td> <code>*</code></td>
         <td> Indirection (dereference)</td>
      </tr>
      <tr>
         <td> <code>&amp;</code></td>
         <td> Address-of</td>
      </tr>
      <tr>
         <td> <code>sizeof</code></td>
         <td> Size-of<sup id="cite_ref-2" class="reference"><a href="#cite_note-2">[note 2]</a></sup></td>
      </tr>
      <tr>
         <td> <code>_Alignof</code></td>
         <td> Alignment requirement<span class="t-mark-rev t-since-c11">(C11)</span></td>
      </tr>
      <tr>
         <th> 3</th>
         <td> <code>*</code> <code>/</code> <code>%</code></td>
         <td> Multiplication, division, and remainder</td>
         <td style="vertical-align: top" rowspan="11"> Left-to-right</td>
      </tr>
      <tr>
         <th> 4</th>
         <td> <code>+</code> <code>-</code></td>
         <td> Addition and subtraction</td>
      </tr>
      <tr>
         <th> 5</th>
         <td> <code>&lt;&lt;</code> <code>&gt;&gt;</code></td>
         <td> Bitwise left shift and right shift</td>
      </tr>
      <tr>
         <th rowspan="2"> 6</th>
         <td> <code>&lt;</code> <code>&lt;=</code></td>
         <td> For relational operators &lt; and ≤ respectively</td>
      </tr>
      <tr>
         <td> <code>&gt;</code> <code>&gt;=</code></td>
         <td> For relational operators &gt; and ≥ respectively</td>
      </tr>
      <tr>
         <th> 7</th>
         <td> <code>==</code> <code>!=</code></td>
         <td> For relational = and ≠ respectively</td>
      </tr>
      <tr>
         <th> 8</th>
         <td> <code>&amp;</code></td>
         <td> Bitwise AND</td>
      </tr>
      <tr>
         <th> 9</th>
         <td> <code>^</code></td>
         <td> Bitwise XOR (exclusive or)</td>
      </tr>
      <tr>
         <th> 10</th>
         <td> <code>|</code></td>
         <td> Bitwise OR (inclusive or)</td>
      </tr>
      <tr>
         <th> 11</th>
         <td> <code>&amp;&amp;</code></td>
         <td> Logical AND</td>
      </tr>
      <tr>
         <th> 12</th>
         <td> <code>||</code></td>
         <td> Logical OR</td>
      </tr>
      <tr>
         <th> 13</th>
         <td> <code>?:</code></td>
         <td> Ternary conditional</td>
         <td style="vertical-align: top" rowspan="6"> Right-to-left</td>
      </tr>
      <tr>
         <th rowspan="5"> 14</th>
         <td> <code>=</code></td>
         <td> Simple assignment</td>
      </tr>
      <tr>
         <td> <code>+=</code> <code>-=</code></td>
         <td> Assignment by sum and difference</td>
      </tr>
      <tr>
         <td> <code>*=</code> <code>/=</code> <code>%=</code></td>
         <td> Assignment by product, quotient, and remainder</td>
      </tr>
      <tr>
         <td> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code></td>
         <td> Assignment by bitwise left shift and right shift</td>
      </tr>
      <tr>
         <td> <code>&amp;=</code> <code>^=</code> <code>|=</code></td>
         <td> Assignment by bitwise AND, XOR, and OR</td>
      </tr>
      <tr>
         <th> 15</th>
         <td> <code>,</code></td>
         <td> Comma</td>
         <td> Left-to-right</td>
      </tr>
   </tbody>
</table>



<!--

• is, to, str, mem, wcs, atomic_, memory_, memory_order_, cnd_, mtx_, thrd_, or tss_ followed by a lowercase letter
• E, FE_, LC_, SIG, SIG_, ATOMIC_, or TIME_ followed by an uppercase letter
• E followed by a number
• PRN or SCN followed by a lowercase letter or the uppercase letter X
• Identifiers starting with uint or int and ending with _t, or UINT or INT and ending with _MAX, _MIN, or _C
• cerf, cerfc, cexp2, cexpm1, clog10, clog1p, clog2, clgamma, ctgamma, optionally followed by f or l

you could do something like, #define PREFIX(name) orcatoy_##name
then you do like, void PREFIX(setmode)(int newmode) { ..... }

-->
<ul>
	<li><a href='https://ftrv.se/3' target='_blank'>Sigrid on C</a></li>
	<li><a href='https://aiju.de/misc/c-style' target='_blank'>Aiju on C</a></li>
</ul>


<h2>Immediate opcodes</h2>

<p>Immediate opcodes are operations which do not take items from the stack, but read values stored <i>immediately</i> after the opcode in the program's memory. Uxntal has 4 immediate opcodes: </p>

<ul>
	<li>The <b>literal</b> <kbd>LIT</kbd>.</li>
	<li>The <b>jump</b> <kbd>!routine</kbd>, immediate of <kbd>JMP</kbd>.</li>
	<li>The <b>conditional</b> <kbd>?routine</kbd>, immediate of <kbd>JCN</kbd>.</li>
	<li>The <b>subroutine</b> <kbd>routine</kbd>, immediate of <kbd>JSR</kbd>.</li>
</ul>

<p>The immediate jump opcodes are slightly faster than their standard opcode counterparts, but do not have modes and cannot be used to do stack arithmetic. The address value of the immediate opcodes are stored in memory as relative shorts, enabling routines making use of these opcodes to be moved around in the program's memory.</p>

<p><b>Quoting</b> is the act of <a href='https://limited.systems/articles/uxntal-quoting/' target='_blank'>deferring an operation</a>, for example, a program that does either <code>odd()</code> or <code>even()</code>, could use <kbd>JMP2</kbd> to <i>unquote</i> a function pointer passed via the stack.</p>

<pre>
@fn ( odd* even* val -- )

	#01 AND
	JMP SWP2 POP2

JMP2
</pre>

<p>Opcodes themselves can also be quoted and unquoted, in the following example, the <kbd>ADD</kbd> opcode will remain on the stack as a value and will not immediately compute the result:</p>

<pre>#06 #07 LIT ADD <span style='float:right'>06 07 18</span></pre>

<p>The opcode can then be utilized when needed by using the following unquoting pattern, which effectively pulls the opcode literal from the stack and writes it at the next address in memory to be evaluated:</p>

<pre>#00 STR $1</pre>


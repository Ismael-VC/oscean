<h2>All operations in lambda calculus can be encoded via abstraction elimination into the SKI calculus as binary trees whose leaves are one of the three symbols S, K, and I (called combinators). </h2>

<ul>
	<li>I: identity combinator: whatever tree is passed in, it will return the original tree.</li>
	 K takes two arguments and then returns the 1st one and ignores the second
	 S(x, y, z) = x(z)(y(z))

 S is does the magic
03:39:40         zzz | I'll try to write it cleanly here
03:41:28         zzz | 
03:42:04         zzz | so it might help to say that S, K, I stand for
                     | things
03:42:11    neauoire | things?
03:42:13         zzz | Substitution, Konstant, Identity

  zzz | so the key to understanding SKI (and lambda calc
                     | to some extent) is that the definitions I gave of
                     | S, K, and I are also in some sense substitution
                     | rules
03:47:29    neauoire | or does it only operate on other functions?
03:47:44         zzz | and running the substitution rules is how you do
                     | computation

 zzz | so will say True is equal to K, T = K
03:51:01         zzz | and False is equal to SK, F = SK
so by convention in the combinatory logic, any
                     | term not passed all it's arguments is just a
                     | function of the remaining terms we are waiting for

                     neauoire | T = K
04:04:45         zzz | yep T = K
04:04:47    neauoire | K has no arguments
04:04:49         zzz | F = SK
 zzz | the question was could by convention have a
                     | function that means true, another function that
                     | means false, and make a program that lets you jump
                     | between the two of them

                     https://doisinkidney.com/posts/2020-10-17-ski.html

</ul>
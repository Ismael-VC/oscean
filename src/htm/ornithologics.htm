<h2>Ornithologics is the study of Avian Computing.</h2>

<p>WORK IN PROGRESS</p>

<pre>
const I = a => a;
const K = a => b => a;
const S = x => (y => (z => x(z)(y(z))));
const KI = a => b => b;
const C = f => a => b => f(b)(a);
const M = a => a(a);
const B = f => g => a => f(g(a));
const TH = a => b => b(a);
const V = a => b => f => f(a)(b);
const BL = f => g => a => b => f(g(a)(b));
const Y = x => (x(Y(x)));
</pre>

<ul>
	<li><a href="http://people.cs.uchicago.edu/~odonnell/Teacher/Lectures/Formal_Organization_of_Knowledge/Examples/combinator_calculus/" target="_blank">A universal formal system</a></li>
	<li><a href="https://github.com/4y8/ski-in-asm/blob/master/src/main.s" target="_blank">Assembly Implementation</a></li>
	<li><a href="https://crypto.stanford.edu/~blynn/lambda/sk.html" target="_blank">A Combinatory Compiler</a></li>
	<li><a href="https://www.willtaylor.blog/combinators-and-church-encoding-in-javscript/" target="_blank">Combinators and Church Encoding</a></li>
	<li><a href="https://blog.ngzhian.com/ski.html" target="_blank">SKI Stack Machine</a></li>
	<li><a href="https://paste.sr.ht/~rabbits/fd54369521fcf3f245f52bfd70834cffcc0be3b6" target="_blank">Javascript REPL</a></li>
	<li><a href="http://tunes.org/~iepos/joy.html" target="_blank">The Theory of Concatenative Combinators</a></li>
</ul>

<h2>Expressions in a point-free language denote functions, and the
juxtaposition of expressions denotes function composition.</h2>

<p>The point-free programming paradigm is where function definitions do not
identify the arguments on which they operate. Instead the definitions merely
compose other functions, among which are combinators that manipulate the
arguments.</p>

<img src='../media/refs/rpn.png' width='40' class='nodark'/>

<h3>Properties of Concatenative Languages</h3>

<ul>
	<li>Concatenative languages are necessarily point-free as allowing terms to denote variables would violate the rule that all terms denote functions.</li>
	<li>The reduction of any expression is the simplification of one function to another function; it is never necessary to deal with the application of functions to objects. This property separates them from the otherwise similar function-level languages of John Backus, which are applicative.</li>
	<li>Any subexpression can be replaced with a name that represents the same subexpression. This is referred to in the concatenative community as factoring and is used extensively to simplify programs into smaller parts.</li>
	<li>The syntax and semantics of concatenative languages form the algebraic structure of a monoid.</li>
	<li>Concatenative languages are well-suited to a linear implementation.</li>
</ul>

<!-- easy handling of multiple value returns, simple
left-to-right syntax, suitability for linear types -->

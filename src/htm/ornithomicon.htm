<h2>The Ornithomicon is the infamous grimoire of Avian Arithmetic.</h2>

<p>Before progressing deeper into the enchanted forests, you should be familiar with the 9 birds of the Bekimet, Becekew and Sekei forests.</p>

<img src="../media/refs/mocking2.png"/>

<h3>Avian Truths & Lies</h3>

<p>The <i>Kestrel</i> takes two words and omits the second word. In other words, it always keeps the first one, this is the word for <b>True</b>:</p>

<pre><b>K</b><x>▲</x><y>◆</y> <span>&bull;</span> <x>▲</x> <comment>Kxy</comment></pre>

<p>The <i>Kite</i> takes two words and omits the second word. In other words, it never keeps the first one, this is the word for <b>False</b>:</p>

<pre><b>KI</b><x>▲</x><y>◆</y> <span>&bull;</span> <y>◆</y> <comment>KIxy</comment></pre>

<p>The <i>Cardinal</i> swaps the second and third words, it can turn a lie into a truth, and a truth into a lie, this is the word for <b>Not</b>:</p>

<pre><b>C</b><b>(</b><b>KI</b><b>)</b><x>▲</x><y>◆</y> <span>&bull;</span> <x>▲</x> <comment>C(KI)(K)(KI)xy</comment></pre>

<p>The <i>Mockingbird</i> takes 2 words that can be either True or False, and says True if at least one of them is True, this is the word for <b>Or</b>:</p>

<pre><b>M</b><b>(</b><b>KI</b><b>)</b><b>(</b><b>K</b><b>)</b><x>▲</x><y>◆</y> <span>&bull;</span> <x>▲</x> <comment>W(WK)(KI)(K)xy</comment></pre>

<p>Two <i>Starlings</i> and a <i>Kestrel</i> can work together to say True, when both words are True, this is the word for <b>And</b>:</p>

<pre><b>S</b><b>S</b><b>K</b><b>(</b><b>KI</b><b>)</b><b>(</b><b>K</b><b>)</b><x>▲</x><y>◆</y> <span>&bull;</span> <y>◆</y> <comment>SSK(KI)(K)xy</comment></pre>

<p>Since the word for True keeps the first of 2 words, and False selects the second, we need a way to pass the second and third words to the first one. The <i>Idiotbird</i> is the equivalent to <b>IfThenElse</b>:</p>

<pre><b>I</b><b>(</b><b>KI</b><b>)</b><x>▲</x><y>◆</y> <span>&bull;</span> <y>◆</y> <comment>I(KI)xy</comment></pre>

<h3><f>■</f> Avian Numerals</h3>

<p>Avian numerals are somewhat odd, the value of a number is equal to how many times a word applies itself on another. Considering that numbers are times a word is applied onto another, applying "2 sqr" to a number "3" would give "sqr (sqr 3)", or 81.</p>

<table border="1">
	<tr><th>0</th><td>KIfx</td><td>x</td><th>4</th><td>SB(SB(WB))fx</td><td>f(f(f(fx)))</td></tr>
	<tr><th>1</th><td>Ifx</td><td>fx</td><th>5</th><td>SB(SB(SB(WB)))fx</td><td>f(f(f(f(fx))))</td></tr>
	<tr><th>2</th><td>WBfx</td><td>f(fx)</td><th>6</th><td>SB(SB(SB(SB(WB))))fx</td><td>f(f(f(f(f(fx)))))</td></tr>
	<tr><th>3</th><td>SB(WB)fx</td><td>f(f(fx))</td><th>7</th><td>SB(SB(SB(SB(SB(WB)))))fx</td><td>f(f(f(f(f(f(fx))))))</td></tr>
</table>

<p>It looks like a <i>Starling</i> and <i>Bluebird</i> always gives us the <b>succeeding number</b>, since "SB2" is 3 and "SB3" is 4.</p>

<pre><b>SB</b><x>5</x> <span>&bull;</span> <y>6</y> <comment>SB(SB(SB(SB(WB))))fx</comment></pre>

<p>It seems that among its many talents, the <i>Bluebird</i> can also be used to <b>Multiply</b> numbers, as "3(2f)" is the same as "6f", thus, "B(3)(2)" is the same as "6". </p>

<pre><b>B</b><b>(</b><x>2</x><b>)</b><b>(</b><y>3</y><b>)</b> <span>&bull;</span> <z>6</z> <comment>B(2)(3)fx</comment></pre>

<p>To proceed, we have to familiarize ourselves with the <i>Phoenix</i>, which applies a word to the result of the second and the fourth, and to the result of the third and the fourth:</p>

<pre><b>Φ</b><f>■</f><x>▲</x><y>◆</y><z>●</z> <span>&bull;</span> <f>■</f><b>(</b><x>▲</x><z>●</z><b>)</b><b>(</b><y>◆</y><z>●</z><b>)</b> <comment>B(BS)Bfxyz</comment></pre>

<p>To <b>Add</b> numbers involve the <i>Phoenix</i> which allows us to apply the first number onto the second:

<pre><b>Φ</b><b>B</b><b>(</b><x>2</x><b>)</b><b>(</b><y>3</y><b>)</b> <span>&bull;</span> <z>5</z> <comment>B(BS)BB(2)(3)fx</comment></pre>

<!--

"Deep in my dream the great bird whispered queerly
Of the black cone amid the polar waste;
Pushing above the ice-sheet lone and drearly,
By storm-crazed aeons battered and defaced."


fghx of f(gx)(hx)</p>

<h3>Y combinator</h3>

<p>Applied to a function with one variable the Y combinator usually does not terminate. More interesting results are obtained by applying the Y combinator to functions of two or more variables. The second variable may be used as a counter, or index. The resulting function behaves like a while or a for loop in an imperative language.</p>

<pre>BM(CBM)fx</pre>

<p>WORK IN PROGRESS</p>

For equals we need a function which takes 2 boolean values and returns True if both of those values are the same.

const equals = p => q => p(q)(not(q));

This function basically reads as:

    If the first value is True, return the second value.
    If the first value is False, return the negation of the second value.


People learn such socially useless things as the names of birds and the grammar of dead languages because they are bored with the mind-dumbing options dished out to them on TV.

In such a fundamental discipline as this, we should not be surprised to find an object which is apparently disappearing up its own fundament.

<h3>Arithmetic</h3>

<pre>
true = K
false = KI
not = V false true = V(KI)K
implies = R true = RK
and = R false = R(KI)
or = T true = TK
equiv = CS not = CS(V(KI)K)
</pre>

-->

<style>
	pre comment { display: inline-block; float:right; color:#777 }
	pre b, pre x, pre y, pre z , pre f { display: inline-block;background: white;padding: 2px 5px;margin: 0px 1px;border-radius: 4px; font-size: 20px; }
	pre x, h3 x { color:#f4bd01 }
	pre y, h3 y { color:#c30d0a }
	pre z, h3 z { color:#72dec2 }
	pre f, h3 f { color:#a380d7 }
	pre span { color:white }
	table .bekimet { background:#f4bd01 }
	table .becekew { background:#f27876 }
	table .sekei { background:#72dec2 }
	table .numerals { background:#a380d7 }
</style>
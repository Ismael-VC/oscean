<h2>Modal is a programming language based on pattern-matching to rewrite trees.</h2>

<p>All Modal code is represented as a series of rules applied to a given tree, formatted textually as tokens delimited with parenthesis, which gets continually modified until no rules match any given part of the tree.</p>

<p>A pattern/replacement can be:</p>

<ul>
	<li><a href='#tokens'>Tokens</a>: foo, bar, baz</li>
	<li><a href='#variables'>Variables</a>: ?foo, ?bar, ?baz</li>
	<li><a href='#sequences'>Sequences</a>: (foo bar baz), (foo ?bar baz), foo (bar (baz))</li>         
</ul>

<h3 id='tokens'>Tokens</h3>

<p>To define a rule, we use the <code>define</code> keyword, followed by the two arguments to replace:</p>

<pre><b>define</b> hello bye
::> hello world

bye world</pre>

<h3 id='variables'>Variables</h3>

<p>A replacement can only use variables that have been used in
a pattern.</p>

<pre><b>define</b> (copy ?a) (?a ?a)
::> (copy foo)

(foo foo)</pre>

<p>When a variable is used in a pattern, and when we try
to match a given tree with a pattern, any variables are bound to their
corresponding tokens/sequences in said tree.</p>

<pre><b>define</b> (swap ?x ?y) (?y ?x)
::> (swap foo bar)

(bar foo)</pre>

<h3 id='sequences'>Sequences</h3>

<p>For example, consider the following:</p>

<pre>define (square ?x) (?x * ?x)
</pre>
<p>This defines a rule with the pattern `square ?x`. Let's try to
apply this pattern to a given tree.</p>

<pre>
square (square (25))
</pre>
<p>Upon feeding this particular tree to Modal, Modal will run through
the list of rules that have been defined and try to match each rule's pattern
with the tree. Modal will crawl along the tree using a hybrid of depth-first
and breadth-first search. When Modal tries to apply the rule to the above tree,
the variable...</p>

<pre>
?x
</pre>

<p>...is bound, and it now has the value...</p>
<pre>
(square (25))
</pre>
<p>From here, now that Modal has found a match, it eliminates part of the
tree that it matched and replaces it with the right-hand side of a given rule.
If the above rule is applied, we end up with a new tree:</p>
<pre>
(square (25)) * (square (25))
</pre>
<p>From here, we run through our defined rules once more, and we end up with
the following tree:</p>
<pre>
((25) * (25)) * ((25) * (25))
</pre>
<p>This is then further reduced using built-in operations. I encourage you to
try it for yourself. Modal always works on a single global tree, and patterns
are applied to various points in that tree. Modal traverses the tree by storing
its textual form in a queue, and at any given moment, Modal tries to match the
head of that queue with a rule from its supplied ruleset.</p>

<p>Q: How do I write common structures, like loops, conditional statements, etc.?<br />
A: Loops map to recursive patterns, and because Modal has a "loose" syntax,
   you can write your own control flow structures.</p>
<pre>
Let's go through an example.

define (if      (true)  ?branch)      (?branch)
define (if      (false) ?branch)      ()
define (if/else (true)  ?true ?false) (?true)
define (if/else (false) ?true ?false) (?false)
</pre>
<p>The above patterns define both a single and double branch expression.
The latter is an example of a ternary statement, where the 'else' branch is
always required. These two control structures can be combined with boolean
operations, as defined below.</p>
<pre>
define ((true)  and (true))  (true)
define ((true)  and (false)) (false)
define ((false) and (true))  (false)
define ((false) and (false)) (false)

define ((true)  or (true))  (true)
define ((true)  or (false)) (true)
define ((false) or (true))  (true)
define ((false) or (false)) (false)

define (not (true))  (false)
define (not (false)) (true)
</pre>
<p>The above defines truth tables for conditional statements. We can use
these in conjunction with if and if/else to form arbitrarily nested conditions.</p>
<pre>
if (
        if/else (
                    (true) and ((false) or (true))
                )
                (
                    not (true)
                )
                (
                    not (false)
                )
   )
   (
        (true) and (true)
   )
</pre>
<p>Here's the above, in a more compact form.</p>
<pre>
if
    (if/else
        ((true) and ((false) or (true)))
        (not (true))
        (not (false)))
    ((true) and (true))
</pre>
<p>However, there's a problem. Due to Modal's queue-based execution,
if the condition for if and if/else isn't fully reduced to 'true' or 'false',
Modal skips over it entirely and evaluates the branches. This leads to some
unexpected behavior, as you end up performing unneeded calculations and
selecting between them at a later point.</p>
<p>It's possible to circumvent this. By defining multiple patterns,
you can use Modal's pattern matching features to perform conditional checks.
Let's try to define the factorial pattern using this method.</p>
<pre>
define (factorial (num 1)) (num 1)
define (factorial (num ?x))  ((num ?x) * (factorial ((num ?x) - (1))))
</pre>
<p>Here, we've written two possible branches for our factorial pattern
in the form of two rules. Since Modal will always use rules defined prior
in the ruleset, we can organize rules according to priority, such that
earlier rules match prior to later ones. This allows us to write
complex conditionals that would otherwise be impossible to write properly.</p>

<p>I hope this has inspired you to give Modal a try. This was a small
taste of what Modal has to offer. Modal's prelude (prelude.modal) includes
a lot of built-in rules that you can use when writing code. It also includes
some examples of custom syntax.</p>

<h3>Comments</h3>

<p>Like everything else, comments can be implemented as rules that remove a length of characters. For example <code>/* This is a comment. */</code>.</p>

<pre>
(/* ?x) -> (/*)
(?x */) -> (*/)
(/* */) -> ()
</pre>

<h3>Prelude</h3>

<pre>
1 -> (s (0));


neg (neg ?x) -> ?x;
neg (0)      -> 0;


add (s ?x) (s ?y) -> s (add ?x (s ?y));
add (0)    (s ?x) -> s ?x;
add (s ?x) (0)    -> s ?x;
add (0)    (0)    -> 0;


?x + ?y + ?z -> (?x + ?y) + ?z;


?x + ?y -> add ?x ?y;


sub (s ?x) (s ?y) -> sub ?x ?y;
sub (s ?x) (0)    -> s ?x;
sub (0)    (s ?x) -> neg (s ?x);
sub (0)    (0)    -> 0;


?x - ?y -> sub ?x ?y;


mul (s ?x) (s ?y)  -> (s ?x) + (mul (s ?x) ((s ?y) - 1));
mul (s ?x) (s (0)) -> s ?x;
mul (s ?x) (0)     -> 0;
mul (0)    (s ?x)  -> 0;


?x * ?y -> mul ?x ?y;


Ensures that a list or a number has been reduced to its normal form. ;

reduced (0)       -> true;
reduced (nil)     -> true;
reduced (s ?x)    -> reduced ?x;
reduced (?h : ?t) -> reduced ?t;
reduced ?x        -> false;


Because there may be conflicts with expressions that
are currently being reduced, we need to fold over reduced
lists, i.e ones that have already been fully generated. ;

fold       (?f) ?i ?l           -> fold reduced ?l (?f) ?i ?l;
fold true  (?f) ?i (nil)        -> ?i;
fold true  (?f) ?i (?h : (nil)) -> ?f ?i ?h;
fold true  (?f) ?i (?h : ?t)    -> ?f ?i (fold (?f) ?h ?t);
fold false (?f) ?i ?l           -> fold (?f) ?i ?l;


factorial (s (0)) -> s (0);
factorial (s ?x)  -> (s ?x) * (factorial ((s ?x) - 1));


sum (?h : ?t) -> fold (add) (0) (?h : ?t);


range ?x (s (0)) -> ?x : (nil);
range ?x (s ?y)  -> ?x : (range (?x + 1) ((s ?y) - 1));


Disgusting (yet valid) hack for currying.
We need lambdas. ;

unpack (?h : nil) -> ?h;
unpack (?h : ?t)  -> ?h unpack ?t;
unpack (?x)       -> ?x;
unpack (?x .      -> ?x unpack (;


:: (?f) ?a -> ?f unpack ?a;


mapp (?f) ?a (nil)        -> nil;
mapp (?f) ?a (?h : (nil)) -> (?f unpack ?a ?h) : (nil);
mapp (?f) ?a (?h : ?t)    -> (?f unpack ?a ?h) : (mapp (?f) ?a ?t);


map (?f) (nil)      -> nil;
map (?f) (?h : nil) -> (?f ?h) : (nil);
map (?f) (?h : ?t)  -> (?f ?h) : (map (?f) ?t);


product ?x -> fold (mul) 1 ?x;


factorial2 ?x -> product (range 1 ?x);


contains ?x (nil)     -> false;
contains ?x (?x : ?t) -> true;
contains ?x (?h : ?t) -> contains ?x ?t;


unique       (nil)     -> nil;
unique false (?h : ?t) -> ?h : (unique ?t);
unique true  (?h : ?t) -> unique ?t;
unique       (?h : ?t) -> unique contains ?h ?t (?h : ?t);


length (nil)     -> 0;
length (?h : ?t) -> s (length ?t);


zipWith (?f) (nil)       (nil)       -> nil;
zipWith (?f) (?h : ?t)   (nil)       -> nil;
zipWith (?f) (nil)       (?h : ?t)   -> nil;
zipWith (?f) (?h1 : ?t1) (?h2 : ?t2) -> (?f ?h1 ?h2) : (zipWith (?f) ?t1 ?t2);


evens ?x -> zipWith (add) (range (0) ?x) (range (0) ?x);


not (not ?x) -> ?x;
not true     -> false;
not false    -> true;


any ?x -> contains true ?x;


all ?x -> not contains false ?x;


none ?x -> not any ?x;


add1 ?x -> add ?x 1;


square ?x -> ?x * ?x;


reduce (s ?x)    -> s (reduce ?x);
reduce (0)       -> (0);
reduce (?h : ?t) -> ?h : (reduce ?t);
reduce (nil)     -> nil;

</pre>

<h3>Modal Machine</h3>
<p>There are only a few components to a Modal machine, and every single one of them is a queue of symbols:</p>

<ul>
    <li>The pattern queue, holding the string-under-rewrite. This is your "main memory".</li>
    <li>A number of "register" queues. These are your variables.</li>
    <li>A number of "rules" queues, holding strings of the form ?left ?right.</li>
</ul>



<!--


<p>Any queue can be peeked at, enqueued to, dequeued from, and "rolled" (enqueue(dequeue())).

Every "tick" (the underlying circuitry was clockless, so "tick" means global component handshakes), you'd step through the "rules" queues, one by one, and roll both the rule queue and the pattern queue.

Before matching, we enqueue a special symbol (SRT, or "start") to keep track of where we were so we can seek to it on success or failure, resetting the queue state for both the rule and the pattern.

If the symbols at the read-head of the pattern queue and the currently selected rule queue are equal, we roll both queues. If they aren't equal, we seek to that special SRT symbol and move on to the next rule.

If we reach the SRT symbol in the rule queue, we can say the rule has matched. We then enqueue an END symbol to the pattern queue, seek to the SRT symbol in the pattern queue, and then remove everything between SRT and END. Then we remove SRT and END, and enqueue the right-hand side of the rule.
</p>


::> (hello) -> (good bye) hello
Reducing...
<>:    ( hello ) -> ( good bye ) hello  
<>:    hello  define ( hello ) ( good bye )  ::: ?x -> ?y 
<>:     define ( hello ) ( good bye ) hello 
<>:    define ( hello ) ( good bye ) hello  
<>:    hello   ::: define ?left ?right 
<>:     good bye  ::: hello 
<>:    good bye  
<>:    bye  good 
<>:     good bye 

That's why you see bye good, with a weird space between them. That's the invisible SRT token.
And that's the interpreter rolling through the pattern queue.
If you encounter a "register" symbol when evaluating a rule, you extract that delimited string symbol-by-symbol and put it in its corresponding register.
So (foo ?x ?y) -> (bar ?y ?x) looks like (foo R0 R1) (bar R1 R0) internally.
Each rule firing clears the registers.
There are some flaws with this machinery, namely that the register queues must be roughly the same size as the pattern queue if they're going to hold large strings.

One thing I'm removing from the implementation apart from arbitrary symbols is the concept of equality on the LHS of a rule. It's pre-defined/assumed that if you do foo ?x ?x, you want to assert equality instead of rebinding x to a new value.

Means you can do...

(?x == ?x) -> (true)
(?x == ?y) -> (false)

-->
<ul>
	<li><a href='https://git.sr.ht/~rabbits/modal' target='_blank'>sources</a>, python</li>
	<li><a href='https://wryl.tech/' target='_blank'>wryl</a>, Immediate Mode Technologies(as of 2019).</li>
</ul>
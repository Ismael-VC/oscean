<h2>Line2d toolkit in ANSI C.</h2>

<pre>typedef struct {<br />	Point2d a, b;<br />} Line2d;<br /><br />double<br />slope2d(Line2d l0)<br />{<br />	if(l0.a.x - l0.b.x == 0.0)<br />		return 0;<br />	return (l0.a.y - l0.b.y) / (l0.a.x - l0.b.x);<br />}<br /><br />Point2d<br />normal2d(Line2d l0)<br />{<br />	Point2d normal = Pt2d(l0.a.y - l0.b.y, l0.b.x - l0.a.x);<br />	double normalLength = sqrt(normal.x * normal.x + normal.y * normal.y);<br />	normal.x /= normalLength;<br />	normal.y /= normalLength;<br />	return normal;<br />}<br /><br />double<br />parallel2d(Line2d l0, Line2d l1)<br />{<br />	return slope2d(l0) == slope2d(l1);<br />}<br /><br />int<br />intersect2d(Line2d l0, Line2d l1, Point2d *p0)<br />{<br />	double den, ua, ub;<br />	if((l0.a.x == l0.b.x &amp;&amp; l0.a.y == l0.b.y))<br />		return 0;<br />	if((l1.a.x == l1.b.x &amp;&amp; l1.a.y == l1.b.y))<br />		return 0;<br />	den = ((l1.b.y - l1.a.y) * (l0.b.x - l0.a.x) - (l1.b.x - l1.a.x) * (l0.b.y - l0.a.y));<br />	if(den == 0)<br />		return 0;<br />	ua = ((l1.b.x - l1.a.x) * (l0.a.y - l1.a.y) - (l1.b.y - l1.a.y) * (l0.a.x - l1.a.x)) / den;<br />	ub = ((l0.b.x - l0.a.x) * (l0.a.y - l1.a.y) - (l0.b.y - l0.a.y) * (l0.a.x - l1.a.x)) / den;<br />	if(ua &lt; 0 || ua &gt; 1 || ub &lt; 0 || ub &gt; 1)<br />		return 0;<br />	p0-&gt;x = l0.a.x + ua * (l0.b.x - l0.a.x);<br />	p0-&gt;y = l0.a.y + ua * (l0.b.y - l0.a.y);<br />	return 1;<br />}<br /><br />void<br />extend2d(Line2d l0, Point2d *p0, int len)<br />{<br />	double lenAB = sqrt(pow(l0.a.x - l0.b.x, 2.0) + pow(l0.a.y - l0.b.y, 2.0));<br />	p0-&gt;x = l0.b.x + (l0.b.x - l0.a.x) / lenAB * len;<br />	p0-&gt;y = l0.b.y + (l0.b.y - l0.a.y) / lenAB * len;<br />}</pre>


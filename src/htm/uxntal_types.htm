<h2>Typed uxntal is an inference system based on routine definitions.</h2>

<p><a href='type_systems.html'>Type inference</a> in <a href='uxntal.html'>Uxntal</a> is done by checking the stack effect declarations of words before they can be run, against the cumulative stack state of each item in the definition of each word.</p>

<ul>
	<li><kbd>( a -- b )</kbd> Normal</li>
	<li><kbd>( a ~- b )</kbd> Normal Branch</li>
	<li><kbd>( a -> b )</kbd> Vector</li>
	<li><kbd>( a ~> b )</kbd> Vector Branch</li>
	<li><kbd>( a -+ b )</kbd> Fallthrough</li>
	<li><kbd>( a ~+ b )</kbd> Fallthrough Branch</li>
	<li><kbd>( a -: b )</kbd> Unsafe</li>
</ul>

<pre>
@routine ( a b -- c ) <i>Ok.</i>
	MUL
JMP2r
</pre>

<p>The simplest case is when a piece of code does not have any branches or recursion, and just pushes literals and calls words. Pushing a literal has stack effect <code>( -- x )</code>. The stack effect of most words is always known statically from the declaration.</p>

<pre>
@add ( <b style='color:red'>a*</b> b* -- c* ) <i>Warning: Imbalance in @add of +2</i>
	DUP2 ADD2
JMP2r 
</pre>

<h3>Branch Type</h3>
<p>Words that do not pass the stack-checker are generating a warning, and so essentially this defines a very simple and permissive type system that nevertheless catches some invalid programs and enables compiler optimizations. </p>

<pre>
@routine ( a -- ) <i>Ok.</i>
	#01 ?&branch POP 
JMP2r
	&branch ( a ~- )
		POP
JMP2r
</pre>

<h3>Fall-through Type</h3>

<p>The tail-less fall-through type allows for routine to not return, and check the stack balance including that of the next routine in memory.</p>

<pre>
@falling ( a b c -+ c )
	POP
@next-routine ( a b -- res )
	ADD
JMP2r
</pre>

<h3>Type Byte</h3>

<p>The type value of a label is recorded as follow: </p>

<pre>
         U F V B D
         | | | | +---- Defined
         | | | +------ Branch
         | | +-------- Vector
Unsafe --+ +---------- Fall-through
</pre>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/uxnbal' target='_blank'>Uxnbal</a>, Source</li>
</ul>



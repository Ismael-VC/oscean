<h2>Tal is the programming language for the Uxn virtual machine.</h2>

<p>Uxn programs are written in a unique flavor of assembly designed especially for this virtual machine. TAL files are human-readable source files, ROM files are uxn-compatible binary program files; an application that transforms a source file into a program is called an <i>Assembler</i>.</p>

<h3>The Stack</h3>

<img src='../media/generic/uxn.beet.png' width='150' style='float:right; margin-left: 15px;'/>

<p>In stack-machine programming, parentheses are unnecessary as there are no <a href='notation.html'>precedence rules</a>, the calculations are merely performed in the sequence in which they are presented. For example, the expression <code>3 + 4</code> in conventional infix notation will be written as <code>3 4 +</code> in postfix notation. The expression <code>(5 + 10) * 3</code> in would be written <code>10 5 + 3 *</code>. </p>

<table border='1'>
	<tr><th>POP</th><td>a b</td><td>Discard top item.</td></tr>
	<tr><th>NIP</th><td>a c</td><td>Discard second item.</td></tr>
	<tr><th>SWP</th><td>a c b</td><td>Move second item to top.</td></tr>
	<tr><th>ROT</th><td>b c a</td><td>Move third item to top.</td></tr>
	<tr><th>DUP</th><td>a b c c</td><td>Copy top item.</td></tr>
	<tr><th>OVR</th><td>a b c b</td><td>Copy second item to top.</td></tr>
</table>

<p>The order in which elements come off a stack is known as <i>last in, first out</i>. In the stack items <code>a b [c]</code>, the <code>c</code> item was the last to be added, and will be the first to be removed.</p>

<h3>The Opcode</h3>

<p>Uxn can perform 32 different operations, each operation has 3 possible modes. The items in the following table include the Program Counter(PC), Memory(M), Devices(D) and Return Stack(rs). For a more detailed view of the opcodes, see the <a href='uxntal_reference.html'>Uxntal Reference</a>.</p>

<table border="1" width="760">
	<tr><th colspan="2">Stack</th><th colspan="2">Memory</th></tr>
	<tr><td><code class='op'>BRK/LIT</code> Literal</td><td>a b c M[PC+1]</td>     <td><code class='op'>LDZ</code> Load Zeropage</td><td>a b M[c8]</td></tr>
	<tr><td><code class='op'>INC</code> Increment</td><td>a b c+1</td>           <td><code class='op'>STZ</code> Save Zeropage</td><td>a {M[c8]=b}</td></tr>
	<tr><td><code class='op'>POP</code> Pop</td><td>a b</td>                     <td><code class='op'>LDR</code> Load Rel</td><td>a b M[PC+c8]</td></tr>
	<tr><td><code class='op'>NIP</code> Nip</td><td>a c</td>                     <td><code class='op'>STR</code> Save Rel</td><td>a {M[PC+c8]=b}</td></tr>
	<tr><td><code class='op'>SWP</code> Swap</td><td>a c b</td>                  <td><code class='op'>LDA</code> Load Abs</td><td>a b M[c16]</td></tr>
	<tr><td><code class='op'>ROT</code> Rotate</td><td>b c a</td>                <td><code class='op'>STA</code> Save Abs</td><td>a {M[c16]=b}</td></tr>
	<tr><td><code class='op'>DUP</code> Duplicate</td><td>a b c c</td>           <td><code class='op'>DEI</code> Device In</td><td>a b D[c8]</td></tr>
	<tr><td><code class='op'>OVR</code> Over</td><td>a b c b</td>                <td><code class='op'>DEO</code> Device Out</td><td>a {D[c8]=b}</td></tr>
	<tr><th colspan="2">Logic</th><th colspan="2">Arithmetic</th></tr>
	<tr><td><code class='op'>EQU</code> Equal</td><td>a b?c</td>                 <td><code class='op'>ADD</code> Add</td><td>a b+c</td></tr>
	<tr><td><code class='op'>NEQ</code> NotEqual</td><td>a b!c</td>              <td><code class='op'>SUB</code> Subtract</td><td>a b-c</td></tr>
	<tr><td><code class='op'>GTH</code> Greater</td><td>a b&gt;c</td>            <td><code class='op'>MUL</code> Multiply</td><td>a b*c</td></tr>
	<tr><td><code class='op'>LTH</code> Lesser</td><td>a b&lt;c</td>             <td><code class='op'>DIV</code> Divide</td><td>a b/c</td></tr>
	<tr><td><code class='op'>JMP</code> Jump</td><td>a b {PC+=c}</td>            <td><code class='op'>AND</code> And</td><td>a b&c</td></tr>
	<tr><td><code class='op'>JCN</code> JumpCond</td><td>a {(b8)PC+=c}</td>      <td><code class='op'>ORA</code> Or</td><td>a b|c</td></tr>
	<tr><td><code class='op'>JSR</code> JumpStash</td><td>a b {rs.PC PC+=c}</td> <td><code class='op'>EOR</code> ExclusiveOr</td><td>a b^c</td></tr>
	<tr><td><code class='op'>STH</code> Stash</td><td>a b {rs.c}</td>            <td><code class='op'>SFT</code> Shift</td><td>a b&gt;&gt;c8l&lt;&lt;c8h</td></tr>
</table>

<p>The modes are indicated by appending extra characters at the end of an opcode, for example, the <i>short mode</i> for the <code class='op'>ADD</code> opcode is <code class='op'>ADD2</code>, modes can also be combined, for example: <code class='op'>ADD2kr</code>.</p>

<ul>
	<li>The <b>short mode(2)</b> operates on shorts instead of bytes.</li>
	<li>The <b>return mode(r)</b> operate on the return stack.</li>
	<li>The <b>keep mode(k)</b> operates without consuming items.</li>
</ul>

<h2>Programming</h2>

<p>Uppercased opcodes are reserved words, hexadecimal values are always lowercased. Comments are within parentheses, curlies are used in the definition of macros, and the square brackets are ignored.</p>

<img src="../media/generic/uxn.team.png" width="250" style="margin:0 auto 30px">

<p>In the following example program, we begin by creating the <code>EMIT</code> macro, which contains <code>#18</code> the byte referencing the <a href='varvara.html#console'>Console/write</a> port, followed by the device output <code class='op'>DEO</code> opcode. From that point onward, using <code>EMIT</code> will send a byte from the stack, to the Console/write port. Each device has 16 ports, each port handles a specific I/O message.</p>

<pre class='example'>
<b>%EMIT</b> { #18 DEO }
<b>%HALT</b> { #010f DEO }

<span class='comment'>( init )</span>

|0100 <span class='label'>@program</span>

	<b>;hello-word</b>

	<span class='label'>&while</span>
		<span class='comment'>( send )</span> LDAk EMIT
		<span class='comment'>( loop )</span> INC2 LDAk <b>,&while</b> JCN
	POP2

	HALT

BRK

<span class='label'>@hello-word</span> "Hello 20 "World! 00
</pre>

<p>Assembled(32 bytes):</p>

<pre>
a001 1294 8018 1721 9480 f70d 22a0 010f
1700 4865 6c6c 6f20 576f 726c 6421 0a00
</pre>

<style>
span.label { font-weight: bold;background: #fff;color: #000;padding: 2px 4px; }
span.comment { color:#aaa }
</style>

<p>Next, we pad to <code class='op'>|0100</code>, which is where the first page of memory ends, and where all Uxn programs begin. Our program begins by pushing the absolute address of the label <code class='op'>@hello-world</code> to the stack, which is defined later, and points to a series of <a href='ascii.html'>ASCII</a> characters. This absolute address is made of two bytes.</p>

<p>We create the child label <code class='op'>&while</code> to this position of the program so we can return to it later. Both <code class='op'>&while</code> and <code class='op'>@while</code> are ways to define labels, but using <code>&while</code> will automatically prefix a new <code>&label</code> with the name of the last <code>@label</code>, in this example <code>program/while</code>. </p>

<table border="1">
	<tr><th colspan="4">Padding</th><th colspan="4">Literals</th></tr>
	<tr><td><code>|</code></td><td>absolute</td><td><code>$</code></td><td>relative</td><td><code>#</code></td><td colspan="3">literal hex</td></tr>
	<tr><th colspan="4">Labels</th><th colspan="4">Ascii</th></tr>
	<tr><td><code>@</code></td><td>parent</td><td><code>&</code></td><td>child</td><td><code>&quot;</code></td><td colspan="3">raw ascii</td></tr>
	<tr><th colspan="4">Addressing</th><th colspan="4">Pre-processor</th></tr>
	<tr><td><code>,</code></td><td>literal relative</td><td>.</td><td>literal zero-page</td><td><code>%</code></td><td>macro-define</td><td><code>~</code></td><td>include</td></tr>
	<tr><td><code>:</code></td><td>raw absolute</td><td><code>;</code></td><td>literal absolute</td></tr>
</table>

<p>Next, the <code class='op'>LDAk</code> opcode takes two bytes at the top of the stack to form an absolute address, and puts the value in memory found at that address to the top of the stack, in this case, the ASCII value of the letter H. That value is sent to Console/write(port #18) which prints that character to the terminal.</p>

<p>We increment the absolute address found on top of the stack with <code class='op'>INC2</code>, because the address is made of two bytes. We load the incremented value, the <code class='op'>JCN</code> opcode will jump to the position of label <code class='op'>&while</code> for as long as the item on the stack not zero. We complete the program with <code class='op'>POP2</code> to remove the address on the stack, to keep the stack clean at the end of the program.</p>

<p>That's it! To learn more, see the <a href="uxntal_cheatsheet.html">Cheatsheet</a>.</p>

<style>
.clr0 { background:white; color:black; }
.clr1 { background:black; color:white; }
.clr2 { background:#72dec2; color:black; }
.clr3 { background:#ff0000; color:black; }
code.op { display: inline-block;padding: 0px 6px;font-weight: bold;border-radius: 4px;border: 2px solid black;line-height: 22px; }
pre span.comment { color:#666; }
img.ugl { width: 15px; display: inline-block; margin: 0px 5px 0px 0px; vertical-align: middle;}
</style>

<ul>
	<li><a href='https://compudanzas.net/uxn_tutorial.html' target='_blank'>Introduction to Uxntal</a>, online book</li>
	<li><a href='https://git.sr.ht/~rabbits/uxntal-examples' target='_blank'>A Collection of Code Examples</a></li>
	<li><a href='https://git.sr.ht/~rabbits/drifblim' target='_blank'>Uxntal Assembler</a>, self-hosted</li>
	<li><a href='https://git.sr.ht/~rabbits/uxnlin' target='_blank'>Uxntal Linter</a>, self-hosted</li>
	<li><a href='../etc/unicycle/index.html' target='_blank'>HTML5 Interpreter</a>, works in browser</li>
</ul>

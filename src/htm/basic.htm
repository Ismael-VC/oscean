<h2>10 PRINT "Hello World"</h2>

<p>This guide is written specifically for the <a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>Varvara implementation</a> of the TinyBASIC compiler, but it should still give a general idea of how to use the language's primitives which are also found in most BASIC implementations.</p>

<figure>
	<img src='../media/refs/vogue-basic.jpg' width='300'/>
	<figcaption>&mdash; Typical BASIC Programmer</figcaption>
</figure>

<h3>Introduction</h3>

<p>A BASIC program begins with line numbers, control-flow is done by jumping to absolute line numbers which point to compiled BASIC code data. 0 is not a valid line number.</p>

<pre>
<span class='line'>15</span> <span class='cmd'>LET</span> A=0
<span class='line'>20</span> <span class='cmd'>PRINT</span> "Hello BASIC"
<span class='line'>25</span> <span class='cmd'>LET</span> A=A+1
<span class='line'>30</span> <span class='cmd'>IF</span> A=10 GOTO 50
<span class='line'>40</span> <span class='cmd'>GOTO</span> 20
<span class='line'>50</span> <span class='cmd'>END</span>
</pre>

<p>The Varvara BASIC compiler does a light compilation where compiled lines hold a link to the following line in memory, as well as byte opcode for each statement.</p>

<pre>
<span class='link'>40 09</span> <span class='line'>00 0f</span> <span class='cmd'>80</span> 41 3d 30 00 <span class='link'>40 1c</span> <span class='line'>00 14</span> <span class='cmd'>89</span> 22 48
65 6c 6c 6f 20 42 41 53 49 43 22 00 <span class='link'>40 27</span> <span class='line'>00 19</span>
<span class='cmd'>80</span> 41 3d 41 2b 31 00 <span class='link'>40 39</span> <span class='line'>00 1e</span> <span class='cmd'>83</span> 41 3d 31 30
20 47 4f 54 4f 20 35 30 00 <span class='link'>40 41</span> <span class='line'>00 28</span> <span class='cmd'>81</span> 32 30
00 <span class='link'>40 47</span> <span class='line'>00 32</span> <span class='cmd'>8a</span> 00 00 00 00 00 00 00 00 00 00
</pre>

<h3>Primitives</h3>

<table>
	<tr><th rowspan='2'><code>RUN</code></th><td>Used to begin program execution at the lowest line number. If the RUN statement is followed by a line number, its execution begins at that specific line. </td></tr>
	<tr><td><pre>RUN 60</pre></td></tr>
	<tr><th rowspan='2'><code>REM</code></th><td>Permits to add remarks(comments) to a program source.</td></tr>
	<tr><td><pre>REM This is a comment.</pre></td></tr>
	<tr><th rowspan='2'><code>LIST</code></th><td>Causes part or all of the user program to be listed. If no parameters are given, the whole program is listed. A single expression parameter in evaluated to a line number which, if it exists, is listed. If both expression parameters are given, all of the lines with line numbers between the two values are listed inclusively.</td></tr>
	<tr><td><pre>LIST 200, 300</pre></td></tr>
	<tr><th rowspan='2'><code>CLEAR</code></th><td>Formats the user program space, deleting any previous programs. If included in a program the program becomes suicidal when the statement is executed.</td></tr>
	<tr><td><pre>CLEAR</pre></td></tr>
	<tr><th rowspan='2'><code>INPUT</code></th><td>Halts evaluation, and assigns the result of expressions to each of the variables listed in the argument. Expressions are entered sequencially and separated by a line break, a list of two arguments, will expect two input lines.</td></tr>
	<tr><td><pre>INPUT X, Y</pre></td></tr>
	<tr><th rowspan='2'><code>LET</code></th><td>Assigns the value of an expression to a variable. Multiple assignments can be done by separating them with a comma.</td></tr>
	<tr><td><pre>LET A=123/2, B=456+3</pre></td></tr>
	<tr><th rowspan='2'><code>IF</code></th><td>Compares two expressions according to one of six relational operators.  If the relationship is True, the statement is executed; if False, the associated statement is skipped.</td></tr>
	<tr><td><pre>IF A>B-2 PRINT "A is greater."</pre></td></tr>
	<tr><th rowspan='2'><code>PRINT</code></th><td>Prints the values of the expressions and/or the contents of the strings in the console.</td></tr>
	<tr><td><pre>PRINT "The result is: " A+B</pre></td></tr>
	<tr><th rowspan='2'><code>GOTO</code></th><td>Changes the sequence of program execution.</td></tr>
	<tr><td><pre>GOTO 50+A>B</pre></td></tr>
	<tr><th rowspan='2'><code>GOSUB</code></th><td>Changes the sequence of program execution, and remembers the line number of the GOSUB statement, so that the next occurrence of a RETURN statement will result in execution proceeding from the statement following the GOSUB.</td></tr>
	<tr><td><pre>GOSUB 220</pre></td></tr>
	<tr><th rowspan='2'><code>RETURN</code></th><td>Transfers execution control to the line following the most recent unRETURNed GOSUB.  If there is no matching GOSUB an error stop occurs. </td></tr>
	<tr><td><pre>RETURN</pre></td></tr>
	<tr><th rowspan='2'><code>END</code></th><td>Must be the last executable statement in a program.  Failure to include an END statement will result in an error stop after the last line of the program is executed.</td></tr>
	<tr><td><pre>END</pre></td></tr>
</table>

<ul>
	<li><a href='https://git.sr.ht/~rabbits/tiny-basic' target='_blank'>View source</a>, Uxntal.</li>
	<li><a href='https://rabbits.srht.site/tiny-basic/basic.rom' target='_blank'>Download ROM</a>, 3kb.</li>
</ul>

<style>
span.line { background:#ff7a6c }
span.cmd { background:#72dec2 }
span.link { background:white }
</style>

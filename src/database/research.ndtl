
RESEARCH
	HOST : home
	TYPE : pict_portal
	BREF : The Research hosts philosophy and linguistics projects.
	BODY
		<p>You can learn more about the {computer} setup used in the development of these projects by visiting the {inventory}, or reading the {research_faqs Research FAQs}.</p>

ARITHMETIC
	HOST : research
	TYPE : text_portal
	BREF : Arithmetics is the study of numbers, especially the properties of the traditional operations on them.
	BODY
		<p>Some mathematicians are of the opinion that the doing of mathematics is closer to discovery than invention.</p>
	LINK
		Logic Gates : https://imgur.com/gallery/I7wFi

GEOMETRY
	HOST : research
	TYPE : text_portal
	BREF : Geometry is the study of space in relation with distance, shape, size, and position of figures. 
	BODY
		<p>A circle is defined as a set of points equidistant from a central point, this distance is the circle's radius.</p>
	LINK
		Paul Bourke : http://paulbourke.net/geometry/pointlineplane/
		Pi Is Wrong : http://www.math.utah.edu/~palais/pi.pdf

BINARY
	HOST : arithmetic
	BREF : Binary numbers are a base 2 numeral system.
	BODY
		<p>A binary number is a number expressed in the base-2 numeral system, which uses only two symbols: 0 and 1. Each digit is referred to as a bit. Because of its straightforward implementation in digital electronic circuitry using logic gates, the binary system is used by almost all modern computers and computer-based devices.</p>
		<figure>{^img refs/binary.jpg 200}<figcaption>—Two of Leibniz's binary calculation examples</figcaption></figure>
		<p>To explore binary logic, see {Noton} or {papier Der Papiercomputer}.</p>

REVERSE POLISH
	HOST : arithmetic
	BREF : In Reverse Polish Notation, the operators follow their operands.
	BODY
		<p>In RPN calculators, no equals key is required to force computation to occur. To learn more about a programming language using RPN at its core, see {Forth}. To find a simple RPN implementation and playground, see {Firth}.</p>
	LINK
		Firth : https://git.sr.ht/~rabbits/firth

LANGUAGE
	HOST : research
	TYPE : pict_portal
	BREF : Various Language notes on natural, synthetic and programming languages.
	BODY
		<p>Welcome to the <b>Language Portal</b>, the goal of these pages is to host a few resources, summaries and notes from my own language studies. I've moved all notes about programming languages {programming here}, and math things {arithmetic here}. Additional notes can be found in the {notebook}.</p>
		{^img refs/bthennota.png 100}
		<q>Kolik jazyků znáš, <br />tolikrát jsi člověkem.</q>
		<h5>—Tomáš Garrigue Masaryk</h5>
		{^list principles of learning}
		{^list dictionary}
		{^list linguistics}
		{^img refs/urobune.png}
	LINK
		koseki-091450 : http://glyphwiki.org/wiki/koseki-091450
		unicode u+21dc9 : https://www.unicode.org/cgi-bin/GetUnihanData.pl?codepoint=U%2B21DC9

COMPUTATION
	HOST : research
	TYPE : text_portal
	BREF : Imagine a computer harnessing the natural behavior of natural systems and utilizing their behaviors to solve equations.
	BODY
		<p>A beauty cold and austere, like that of sculpture, without appeal to any part of our weaker nature, without the gorgeous trappings of painting or music, yet sublimely pure, and capable of a stern perfection such as only the greatest art can show.{https://en.wikipedia.org/wiki/Mathematical_beauty ~}</p>
		{^list mechanical computers}
	LINK
		Build a Working Digital Computer : https://archive.org/details/howtobuildaworkingdigitalcomputer_jun67
		Thread : https://merveilles.town/web/statuses/105206667496290460
		A bunch of rocks : https://xkcd.com/505
		Domino Computer : https://en.wikipedia.org/wiki/Domino_computer
		Systems design : https://apenwarr.ca/log/20201227

PAPER COMPUTING
	HOST : computation
	BREF : Exploring what sort of computing can be done on paper.
	TYPE : pict_portal
	LINK
		Nomographie : https://archive.org/details/traitdenomograp00ocaggoog/page/n21/mode/2up
		Deadreckonings : https://deadreckonings.com
		Paper Phone : https://specialprojects.studio/project/paper-phone
		Paper Camera : https://kellianderson.com/books/thecamera.html
		Pen & Paper games : http://zenseeker.net/BoardGames/PaperPenGames.htm
		Cardtalk Player : https://globalrecordings.net/en/cardtalk
		Alligator Calculus : http://worrydream.com/AlligatorEggs/
		Sadako : https://esolangs.org/wiki/Sadako
		Thread : https://yip.pe/analog.html

NEEDLES
	HOST : paper computing
	TYPE : hidden
	BREF : Needles are glyphs of which the intersection count is equal to the value of the character.
	BODY
		<p>The glyphs are not used into any specific project, but are available here as a reference of a meaningful numeric glyph system.</p>
		{^img generic/needles.svg}

SHORTHAND
	HOST : paper computing
	TYPE : hidden
	BREF : Shorthand is a calligraphy style developed to take faster notes.
	BODY
		<p>I played with different ideas and this is the system that worked best for me. It's a mixture of already existing shorthand systems that fits my writing style.</p>
		<p>Simple enough, now most letters are transformed into a single stroke shape that flows and combines to form shorter words, that can be written faster.</p>
		{^img generic/shorthand.svg}

ORIGAMI
	HOST : physical
	TYPE : album
	BREF : Origami is the art of paperfolding.
	BODY
		<p>The Sonobe unit has the shape of a parallelogram with 45 and 135 degrees angles, divided by creases into two diagonal tabs at the ends and two corresponding pockets within the inscribed center square. The system can build a wide range of three-dimensional geometric forms by docking these tabs into the pockets of adjacent units. </p>
		{^img refs/sonobe.jpg 400}
		<p>Three interconnected Sonobe units will form an open-bottomed triangular pyramid with an equilateral triangle for the open bottom, and isosceles right triangles as the other three faces.</p>
		{^img refs/sonobe.gif}
		<q>Rhombitruncated cuboctahedron or whatever</q>
	LINK
		Wikipedia : https://en.wikipedia.org/wiki/Sonobe
		Origami mechanologic : https://www.pnas.org/content/115/27/6916
		Modular Origami : https://www.origami-resource-center.com/modular.html
		Science Origami : https://www.origami-resource-center.com/origami-science.html

PAPIER
	HOST : paper computing
	BREF : The design for a simple portable computer that only requires a pen and a piece of paper.
	BODY
		<p>The computer consists of a sheet of paper that contains both the program as well as a number of data registers and a paper {nibble_dice nibble dice}, that will be used to represent the contents of the {computation data registers}. This is a modified and extended edition of the {https://en.wikipedia.org/wiki/WDR_paper_computer papiercomputer} by Wolfgang Back and Ulrich Rohde.</p>
	LINK
		WDR Paper Computer : https://en.wikipedia.org/wiki/WDR_paper_computer
		Original(pdf) : https://gmg-bayreuth.de/wp-content/uploads/2017/03/papiercomputer.pdf

NIBBLE DICE
	HOST : paper computing
	BREF : A nibble is equivalent to half a byte or 4 bits, encodable on one of the 6 faces of a die.
	BODY
		<p>A 6-sided die can easily be built using 6 sonobe {origami} modules, 2 dice can be used to store {binary 8 bits} of data for the {papier paper computer}. This is an original idea from {https://republic.circumlunar.space/~maleza/nobinario.html Maleza}.</p>
	LINK
		Original idea(Spanish) : https://republic.circumlunar.space/~maleza/nobinario.html
		Nibble : https://es.wikipedia.org/wiki/Nibble

PROGRAMMING
	HOST : computation
	BREF : A collection of notes on programming languages.
	TYPE : text_portal
	BODY
		<p>We use software because we have goals to achieve and things to do. The software we use is coded by programmers who have their own goals, sometimes these goals overlap with ours, over time these will diverge. The tools we depend on grow features we don't use or understand, introducing bugs that will prevent us from reaching our goals.</p>
		{^img refs/children.png}
		<p>We have the choice of trying to understand the code and fix it, we have the choice of trying another program, and we have the choice of coding the software ourselves. All but the last path mean {stack endless seeking}, evaluating and further deviation from our goals. </p>
		{^list code it yourself manifesto}
		<p>Software freedom is the freedom to run the program as you wish, for any purpose, to study how the program works, and change it, to redistribute copies and your modified versions so you can help others.</p>
		{^img refs/tangram.png 300}
		<q>The concept that programming is something that you need special education to do is not right. It is something that is promoted by the priesthood.</q>
		<h5>Chuck Moore, Color Forth</h5>
	LINK
		Galaksija : https://en.wikipedia.org/wiki/Galaksija_(computer)
		Trinary Computer Systems : http://xyzzy.freeshell.org/trinary/trinary07.html
		Code It Yourself Manifesto : http://pestilenz.org/~ckeen/blog/posts/ciy-manifesto.html
		Notation as a Tool of Thought : https://www.jsoftware.com/papers/tot.htm

VIRTUAL MACHINES
	HOST : computation
	TYPE : pict_portal
	BREF : A collection of experimental computing systems.
	BODY
		<p>A VM is a program that acts like a computer. It simulates a CPU along with a few other hardware components, allowing it to perform arithmetic, read and write to memory, and interact with I/O devices, just like a physical computer. Most importantly, it can understand a machine language which you can use to program it. To see examples of this in action, see {Orca} or {Uxn}.</p>
		{^img refs/computers.png 300}
	LINK
		sbtcvm : https://sbtcvm.blogspot.com

FRACTRAN
	HOST : virtual machines
	BREF : Fractran is insanely difficult to program in, but based on one of the most bizarrely elegant concepts of computation.
	BODY
		<p>A Fractran program is an ordered list of positive fractions together with an initial positive integer input. The program is run by updating the accumulator.</p>
		<figure>{^img refs/fractran.jpg 340}<figcaption>—The Book of Numbers, {https://en.wikipedia.org/wiki/John_Horton_Conway John Conway}</figcaption></figure>
		<p>Any number that can't be divided by any other number, apart from itself and one, is {arithmetic prime}. Since primes can't be divided, we can think of them as the DNA of other numbers. In Fractran, each prime is a register and their exponent is their value. </p>
		{^html fractran_guide}
		<h3>Interpreter</h3>
		<p>A simple Fractran interpreter, written in <a href='ansi_c'>ANSI C</a>, showing the value in the registers as it steps through the program.</p>
		{^text fractran.c}
		<q>A common man marvels at uncommon things; a wise man marvels at the commonplace.</q>
		<h5>—Confucius</h5>
	LINK
		Fractran Interpreter(C89) : https://git.sr.ht/~rabbits/fractran
		Fractran Interpreter(Web) : https://tjwei.github.io/Fractran
		Intro to Fractran : https://esoteric.codes/blog/an-intro-to-fractran
		Article on Esolang : https://esolangs.org/wiki/Fractran
		Collatz function : https://esolangs.org/wiki/Collatz_function
		Register Machine : https://en.wikipedia.org/wiki/Register_machine
		OISC : https://en.wikipedia.org/wiki/One-instruction_set_computer

SUBLEQ
	HOST : fractran
	BREF : SUBLEQ is a type of One Instruction Set Computer(OISC) architecture.
	BODY
		<p>The subleq instruction subtracts the contents at address <code>a</code> from the contents at address <code>b</code>, stores the result at address <code>b</code>, and then, if the result is not positive, jumps to address <code>c</code>. If the result is positive, execution proceeds to the next instruction in sequence.</p>
	LINK
		Oleg Mazonka : http://mazonka.com/subleq/index.html

GYO
	HOST : virtual machines
	BREF : Gyo is a register machine with 16 instructions.
	BODY
		<p>Gyo was designed as an educational system foundational computing concepts. The computer has 16 registers, 16 opcodes and 256 memory addresses. The gyo {assembly assembler} syntax supports <code>=constants</code> and <code>:labels</code>. The computer and assembler are written in less than 400 lines of {ansi_c ANSI C} code.</p>
		{^img generic/gyo.jpg 200}
	LINK
		source : https://git.sr.ht/~rabbits/gyo

UXN
	HOST : virtual machines
	TYPE : portal
	BREF : Uxn is a stack-machine with 32 instructions.
	BODY
		<p>Uxn is a portable 8-bit virtual computer inspired by {forth forth-machines}, capable of running simple {roms tools and games} programmable in its own unique {Uxntal assembly language}. </p>
		<img src='../media/generic/uxn.png' width='200' style='float:right'/>
		<p>It was designed with an implementation-first mindset with the goal of targeting {collapse_computing salvaged computers}, the distribution of Uxn projects is akin to sharing game roms for any classic console emulator.</p>
	LINK
		source : https://sr.ht/~rabbits/uxn/
		forum : https://llllllll.co/t/uxn-virtual-computer/46103
		original illustrations by rekka bellum : https://kokorobot.ca/

UXNTAL
	HOST : uxn
	BREF : Uxntal is the programming language for the Uxn stack-machine.
	BODY
		<p>The programming language for creating Uxn-compatible applications is called <b>Uxntal</b> or simply <i>Tal</i>, it is a unique flavor of {assembly} designed for this unique stack-machine. The program that transforms Tal files, into Uxn-compatible roms, is the Uxn Assembler.</p>
		<img src='../media/generic/uxn.beet.png' width='150' style='float:left'/>
		<p>Stack machine programming might look at bit odd, as it uses a {reverse_polish postfix notation}, which means that operators are always found at the end of an operation. For instance, one would write <code>3 4 +</code> instead of <code>3 + 4</code>. The expression written <code>(5 + 10) * 3</code> in conventional notation would be written <code>3 10 5 + *</code> in reverse Polish notation.</p>
		<hr style='border:0'/>
	LINK
		Introduction to Uxntal : https://compudanzas.net/uxn_tutorial.html
		Uxn Assembler : https://git.sr.ht/~rabbits/uxn/tree/master/item/projects/software/asma.tal
		C Assembler : https://git.sr.ht/~rabbits/uxn/tree/master/item/src/assembler.c
		Rust Assembler : https://github.com/karolbelina/ruxnasm
		Vim Syntax : https://github.com/karolbelina/uxntal.vim

UXNTAL MACROS
	HOST : uxntal
	BREF : A collection of commonly used macros in uxn projects.

UXNEMU
	HOST : uxn
	BREF : Uxnemu is a Uxn emulator written in ANSI C, and SDL2.
	BODY
		<p>The thin layer that is the {uxn Uxn emulator} is the only part of this project needing to be ported to make the system available on a new platform. For that reason, Uxn was designed with a focus on portability and simplicity such that it welcomes anyone to try their hand at building their own implementation. The {https://git.sr.ht/~rabbits/uxn current emulator} is 400 lines of C89, with SDL2 as its only dependecy.</p>
		<img src='../media/generic/uxn.comfy.png' width='250' style='margin: 0px auto 30px'/>
	LINK
		Uxn on Desktop : https://git.sr.ht/~rabbits/uxn/
		Uxn on Browser : https://github.com/aduros/webuxn
		Uxn on Gameboy Advance : https://git.badd10de.dev/uxngba/
		Uxn on Nintendo DS : https://github.com/asiekierka/uxnds
		Uxn on PS Vita : https://github.com/ivodopiviz/uxnvita
		Uxn on Teletype : https://github.com/csboling/teluxn
		Uxn on Pico Pi : https://git.sr.ht/~alderwick/pico-uxn-sharpdisplay
		Uxn on Esp32 : https://github.com/max22-/uxn-esp32

CELLULAR AUTOMATA
	HOST : computation
	BREF : One way to simulate a two-dimensional cellular automaton is with an infinite sheet of graph paper along with a set of rules for the cells to follow. 
	BODY
		<p>The universe of John Horton Conway's Game Of Life is an infinite, two-dimensional orthogonal grid of cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbours. At each step in time, the following transitions occur: </p>
		<ul>
		    <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li>
		    <li>Any live cell with two or three live neighbours lives on to the next generation.</li>
		    <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li>
		    <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li>
		</ul>
		<p>In cellular automata, a <b>methuselah</b> is a small "seed" pattern of initial live cells that take a large number of generations in order to stabilize.</p>
		{^youtube NP1N_yv1YAU}
	LINK
		GOL Wiki : https://conwaylife.com/wiki/Main_Page
		Uxn Implementation : https://git.sr.ht/~rabbits/uxn/tree/master/item/projects/examples/demos/life.tal

FLUIDICS
	HOST : computation
	BREF : Fluidics is the construction of computing systems using fluids.
	BODY
		<p>They employed water or air in plastic channels to implement logic gates; the gates were interconnected by standard, flexible plastic tubing. The advantage was their noise immunity, but their size and physical awkwardness was among their many negatives. A typical four-input AND or OR gate alone was about half the size of a deck of cards.</p>
		{^img refs/fluidics.jpg 200}
	LINK
		Scientific American : http://miriam-english.org/files/fluidics/FluidControlDevices.html
		Gardens as Water Computers : https://hplusmagazine.com/2013/05/10/gardens-as-crypto-water-computers

FRACTALS
	HOST : computation
	BREF : Fractals are infinitely complex patterns that are self-similar across different scales. 
	BODY
		{^img refs/mandelbrot.png 500}
	LINK
		Julia Set : https://rosettacode.org/wiki/Julia_set#C
		Mandelbrot Set : https://jonisalonen.com/2013/lets-draw-the-mandelbrot-set/
		Mandelbroth By Hand : https://www.wikihow.com/Plot-the-Mandelbrot-Set-By-Hand

HARDWARE
	HOST : research
	TYPE : pict_portal
	BREF : A handful of experimental projects on small Hardware.
	BODY
		<p>If a system has a million elements and each element will malfunction only one time out of a million, a breakdown is {stack certain}.</p>

RASPBERRY
	HOST : hardware
	TYPE : pict_portal
	BREF : The Raspberry is a small inexpensive single-board computer.
	BODY
		<p>To learn more about using {Plan9} on Raspberry Pi as a desktop computer, see {computer}.</p>

RADIO STATION
	HOST : raspberry
	BREF : The Radio Station aboard Pino.
	BODY
		<p>Our {pino sailboat}'s speakers are connected via {https://www.apple.com/airplay/ Airplay} through Pimoroni's {https://learn.pimoroni.com/tutorial/sandyj/streaming-airplay-to-your-pi Phat Beat} for {raspberry}.</p>
		<p>The hat has two speaker-wire outputs, making a cheap and powerful stereo.</p>
	LINK
		guide : https://learn.pimoroni.com/tutorial/sandyj/streaming-airplay-to-your-pi

FRAMBOISEDORF
	HOST : raspberry
	TYPE : album
	BREF : Overview of the Framboisedorf toy piano.
	BODY
		<p>A hackable toy piano to play {https://twitter.com/neauoire/status/1029498719811424256 muzzak} on rainy days.</p>
		<p>Features 6 synth & 1 drum instruments, 5 octaves, and automated arpgeggios. Connect to a speaker and play. Read the full guide on {https://github.com/neauoire/Framboisedorf.local Github}, or watch a {https://youtu.be/U8q_yZ3XEKU demo video}.</p>
	LINK
		guide : https://learn.pimoroni.com/tutorial/piano-hat/getting-started-with-piano-hat
		projects : https://github.com/pimoroni/Piano-HAT
		youtube : https://youtu.be/U8q_yZ3XEKU

WEATHER STATION
	HOST : raspberry
	TYPE : album
	BREF : The documentation for the Weather Station aboard Pino.
	BODY
		<p>Our {pino sailboat}'s {weather_station} is a simple solderless {raspberry} project.</p>
		<p>Its purpose is to display a simple reading of the changes in barometric pressure to monitor the onset of stormy weather.</p>

INSTRUMENT
	HOST : raspberry
	TYPE : album
	BREF : The Instrument is the sailing computer inside Pino
	BODY
		<p>The application displays various data about the course, speed, location and time.</p>
		<p>Its original purpose was to help with night sailing where the compass and some of our sailing instruments were hard to see. More details and links shortly.</p>

MICROBIT
	HOST : hardware
	TYPE : album
	BREF : The Microbit is a small educational micro-controller from BBC.
	BODY
		<p>The Microbit is an excellent toy to learn to code and create electronics projects.</p>
	LINK
		official site : https://microbit.org/

REFORM
	HOST : hardware
	BREF : The Reform laptop is designed to be as open and transparent as possible.
	BODY
		<p>The Reform laptop is designed to stay with you for a long time. From open-hardware input devices to user-swappable 18650 battery cells, it is designed to be the most repairable and best documented portable computer.</p>
		<p>Its components have been selected explicitly to strike a good balance between open source and usability. </p>
	LINK
		homepage : https://mntre.com

PLAYGROUND
	HOST : hardware
	BREF : The Playground is a flexible experimental micro-controller from Adafruit.
	BODY
		<p>The Playground Express is a ATSAMD21 ARM Cortex M0 Processor, running at 3.3V and 48MHz, the USB port can act as serial port, keyboard, mouse, joystick or MIDI.</p>
	LINK
		adafruit : https://www.adafruit.com/product/3333

NORNS
	HOST : hardware
	TYPE : album
	BREF : The Norns is an open-source DSP computer, with 3 knobs and 3 keys.
	BODY
		<p>I currently maintain a <b>programming tutorial guide</b> for the {norns}, which can be found {https://llllllll.co/t/norns-tutorial/23241 here}. You can also find a version of {orca} for the Norns {https://llllllll.co/t/orca/22492 here}.</p>
	LINK
		tutorial : https://llllllll.co/t/norns-tutorial/23241

MONOME
	HOST : hardware
	TYPE : album
	BREF : The Monome is an open-source controller, each of its 128 keys can light up between 16 levels of brightness.
	BODY
		<p>I presently use the device for audio & visual experiments under the {alicef} alias, ultimately I would like to carry the {monome} and the {norns} along with me on stage during events.</p>
		<p>I created a handful of scripts for the device, such as the implementations for the {https://github.com/neauoire/linn Linnstrument Keyboard layout}, and {https://github.com/neauoire/rack Ableton Drum Rack layout}.</p>
	LINK
		website : https://monome.org/
		linn forum : https://llllllll.co/t/using-a-grid-as-linnstrument/23637
		rack forum : https://llllllll.co/t/using-a-grid-as-drum-rack/23932

MACINTOSH
	HOST : hardware
	TYPE : pict_portal
	BREF : Notes and links related to the Macintosh II computer.
	BODY
		<p>The {https://en.wikipedia.org/wiki/Macintosh_II Macintosh II} computer used the excellent OS7 operating system, supporting great software such as {hypertalk Hypercard}, and {pascal THINK Pascal}.</p>
		<p>I used the Macintosh ecosystem to illustrate parts of the {Neauismetica} project, the idea of virtualizing an entire workstation has inspired the {Uxn} project, which is now my {https://100r.co/site/uxn.html main virtual workstation}.</p>
		{^list macintosh software}
	LINK
		Mini vMac : https://www.gryphel.com/c/minivmac/
		macintosh cookbook : https://git.sr.ht/~rabbits/macintosh_cookbook

FAMICOM
	HOST : hardware
	TYPE : album
	BREF : The famicom is an 8bit video game console by Nintendo.
	BODY
		<p>The famicom notes were created during the production of the NES release of {donsol} and {nespaint}, to learn more about programming for the console, see {assembly}.</p>
	LINK
		famicom cookbook : https://git.sr.ht/~rabbits/famicom_cookbook


ENGLISH
	HOST : language
	BREF : Assorted notes on the English language.

JAPANESE
	HOST : language
	TYPE : album
	BREF : The Japanese page is a collection of Japanese study notes.
	LINK
		sci.lang.japan : http://rut.org/~wmaton/www/pub/jap.guide.txt

RUSSIAN
	HOST : language
	BREF : The Russian page is a collection of Russian study notes.

TOKI PONA
	HOST : language
	BREF : Toki Pona is a philosophical artistic constructed language known for its small vocabulary.
	BODY
		<p>The underlying feature of Toki Pona is minimalism. It focuses on simple universal concepts, making use of very little to express the most. The language is isolating and has 14 phonemes and around 123 root words that are easy to pronounce across languages.</p>
	LINK
		pimeja : https://pimeja.lectronice.com

LIETAL
	HOST : language
	TYPE : album
	BREF : Lietal is an experimental synthetic language.
	BODY
		<p><b>Lietal</b> is a modular language building on 27 core words, it is written from left to right with implicit neutrality, singularity and at the present tense. </p>
	LINK
		ANSI C Library : https://github.com/XXIIVV/oscean/tree/master/src/projects/lietal

ASSEMBLY
	HOST : programming
	BREF : 6502 Assembly is the language used to program the Famicom, BBC Micro and Commodore 64 computers.
	BODY
		<p>Assembly is any low-level {programming} language in which there is a very strong correspondence between the instructions in the language and the architecture's machine code instructions. An assembler translates the assembly language syntax into their numerical equivalents.</p>
		<figure>{^img refs/valeria.jpg 300}<figcaption>—Валерия, Красная палатка</figcaption></figure>
		<p>This page focuses on the assembly language for the 6502 processor, targetting the {Famicom}. Prior to learning assembly, I would recommend learning the basics of {binary binary numbers}. To explore a system with minimal instructions set, try the {Uxn} virtual machine. To see a simple example of a complete 6502 assembly project, see {spacetime_6502 Spacetime}.</p>
		{^img refs/mos6502.jpg 100}
	LINK
		famicom cookbook : https://git.sr.ht/~rabbits/famicom_cookbook

FORTH
	HOST : programming
	BREF : Forth is a programming language that uses two stacks and a dictionary of words.
	TYPE : pict_portal
	BODY
		<p>A Forth environment combines the compiler with an interactive shell, where the user defines and runs subroutines called words. Words can be tested, redefined, and debugged as the source is entered without recompiling or restarting the whole program.</p>
		<p>Forth programmers enjoy the immediacy of an interpreter while at the same time the performance and efficiency of a compiler. </p>
		<figure>{^img refs/vogue.jpg 300}<figcaption>—Forth Programming Aesthetics</figcaption></figure>
		<p>I use a custom version of the <code>lbforth.c</code> REPL, modified to work on {Plan9} ARM which can be downloaded {../src/inc/text/lbforth9.c.txt here}. To experiment with a subset of Forth in the terminal, have a look at {Firth} and {Uxn}, for a graphical exploration try {Postscript} which also follows the {reverse_polish Reverse Polish Notation}.</p>
	LINK
		Forth Tutorial : http://www.murphywong.net/hello/simple.htm
		Original lbforth : https://gist.github.com/lbruder/10007431
		Reverse Polish notation : https://en.wikipedia.org/wiki/Reverse_Polish_notation
		Sporth : https://pbat.ch/proj/sporth.html
		Forth Methodology : http://www.ultratechnology.com/method.htm
		Forth Primitives : https://users.ece.cmu.edu/~koopman/stack_computers/appb.html
		Thoughts : http://www.call-with-current-continuation.org/articles/forth.txt
		Language for Thoughtful Programming : https://patorjk.com/programming/articles/forththoughts.htm
		Forth History : https://colorforth.github.io/HOPL.html

LISP
	HOST : programming
	BREF : Lisp is a family of programming languages with a long history and a distinctive, fully parenthesized prefix notation.
	BODY
		<p>Lisp follows the “Prefix Notation”, where operations use the format <code>(* 5 5)</code> instead of <code>(5 * 5)</code>. For example, if we wanted to add a lot of numbers together, we conventionally do <code>2 + 3 + 4 + 6 + 11</code>, in Scheme we would instead write <code>(+ 2 3 4 6 11)</code>, which is much more concise.</p>
	LINK
		Scheme Tutorial : http://www.shido.info/lisp/idx_scm_e.html
		Lisp Eval : http://lib.store.yahoo.net/lib/paulgraham/jmc.lisp
		Build Your Own Lisp : http://buildyourownlisp.com

PASCAL
	HOST : programming
	TYPE : album
	BREF : Pascal is an imperative and procedural programming language designed for teaching students structured programming.
	BODY
		<p>My main interest in the language is building little {macintosh} applications such as {graf3dscene}, and exploring the {http://www.think-pascal.org THINK Pascal 4.0.2} environment. I have saved many example files in the {https://git.sr.ht/~rabbits/macintosh_cookbook Macintosh Cookbook} repository.</p>
		<p>THINK Pascal is a development system for the {Macintosh}, released by Think Technologies in 1986 as Lightspeed Pascal. Think Technologies was bought by Symantec, and the name was changed to Think Pascal. The last official update came 1992, and the product was officially discontinued in 1997.</p>
	LINK
		macintosh cookbook : https://git.sr.ht/~rabbits/macintosh_cookbook
		pascal central : http://pascal-central.com
		user manual : https://archive.org/details/THINKPascalUserManual1991/mode/2up
		Pascal and Simplicity : http://pascal.hansotten.com/simplicity

ANSI C
	HOST : programming
	BREF : C is the native language of Unix. It has come to dominate systems programming in the computer industry.
	BODY
		<p>Work on the first official C standard began in 1983. The major functional additions to the language were settled by the end of 1986, at which point it became common for programmers to distinguish between "K&R C" and {https://en.wikipedia.org/wiki/ANSI_C ANSI C}.</p>
		<p>One good reason to learn C, even if your programming needs are satisfied by a higher-level language, is that it can help you learn to think at hardware-architecture level. For notes specific to the {Plan9}'s C compiler, see {plan9_c Plan9 C}.</p>
	LINK
		Sigrid on C : https://ftrv.se/3
		Aiju on C : https://aiju.de/misc/c-style

DEFUNCT
	HOST : ansi c
	BREF : A collection of helpers to do specific operations in ANSI C.
	BODY
		<p>Instead of including entire libraries like <code>stdlib.h</code>, <code>string.h</code> and <code>ctype.h</code>, one might prefer to manually select only the handful of functions that be used in a given project.</p>
		<p>To see an example of these basic helpers used into projects, have a look at {Oscean}, {Moogle}, or {Parade}.</p>

POINT2D
	HOST : ansi c
	BREF : Point2d toolkit in ANSI C.
	BODY
		{^text point2d.c}

LINE2D
	HOST : ansi c
	BREF : Line2d toolkit in ANSI C.
	BODY
		{^text line2d.c}

ASCII
	HOST : ansi c
	BREF : The ASCII table.
	LINK
		fonts : https://damieng.com/typography/zx-origins/
		more fonts : http://uzebox.org/wiki/Font_Bitmaps
		yet more fonts : http://home-2002.code-cop.org/c64/font_03.html  

MIDI
	HOST : ansi c
	BREF : The MIDI table.
	LINK
		PortMidi : http://portmedia.sourceforge.net/portmidi/

POSTSCRIPT
	HOST : programming
	BREF : Postscript is a programming language that was designed to specify the layout of the printed page. 
	BODY
		<p>The Postscript language uses a {reverse_polish postfix} syntax similar to {Forth}. The {Dotgrid} language was designed to be a subset of the Postscript toolkit.</p>
	LINK
		tutorials : https://www.math.ubc.ca/~cass/graphics/manual/

HYPERTALK
	HOST : programming
	TYPE : album
	BREF : Hypertalk is the programming language used in the mac software Hypercard.
	BODY
		<p>Hypertalk can be emulated easily using a {Macintosh} emulator, the default Hypercard canvas size is {https://hundredrabbits.github.io/Noodle/#512x342 512x342}.</p>
		<p>For most basic operations including mathematical computations, HyperTalk favored natural-language ordering of predicates over the ordering used in mathematical notation. For example, in HyperTalk's put assignment command, the variable was placed at the end of the statement:</p>
		<pre>put 5 * 4 into theResult</pre>
	LINK
		tutorial guide : https://opus.uleth.ca/bitstream/handle/10133/856/Christmas_Kevin_G.pdf
		tutorial video : https://www.youtube.com/watch?v=LVq67vYyAqo
		tips and tricks : http://www.jaedworks.com/hypercard/HT-Masters/scripting.html


UNIX
	HOST : programming
	TYPE : pict_portal
	BREF : Unix is a family of computer operating systems that derive from the original Unix from Bell Labs.
	BODY
		<p>This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.</p>
		<p>Expect the output of every program to become the input to another, as yet unknown, program. Don't clutter output with extraneous information. Avoid stringently columnar or binary input formats. Don't insist on interactive input.</p>

PLAN9
	HOST : unix
	TYPE : pict_portal
	BREF : Plan 9 is a fully-featured, clean, compact and uniform operating system built as a successor to Unix.
	BODY
		<p><b>Plan 9 is not a product</b>, it is <i>an experimental investigation into a different way of computing</i>. The developers started from several basic assumptions: that CPUs are very cheap but that we don't really know how to combine them effectively; that *good* networking is very important; that an intelligent user interface is a Right Decision; that existing systems are not the correct way to do things, and in particular that today's workstations are not the way to go.</p>
		<p>This portal serves to introduce to Plan 9's ecosystem and application development. I currently use Plan 9 as my {workstation daily driver} installed on a {Raspberry Raspberry Pi 3B}, the flavor of the operating system that I presently run is Richard Miller's {https://9p.io/wiki/plan9/download image}. I don't know anything about the issues involved in emulation, and I am not interested in plan9port.</p>
		<p>I've divided my notes into {Rio}(windows manager), {Acme}(text editor) and misc {plan9_c Plan9 C} tutorials.</p>
		<q>An argument for simplicity and clarity.</q>
		<h5>—Rob Pike</h5>
		{^img refs/glenda.gif}
		{^list plan9 software}
	LINK
		Molly Nilsson 1995 : https://mollynilsson.bandcamp.com/track/1995
		thread : https://merveilles.town/web/statuses/104609568812530054
		Wiki : https://9p.io/wiki/plan9/plan_9_wiki
		Intro : http://lsub.org/who/nemo/9.intro.pdf
		Bell Labs : http://doc.cat-v.org/bell_labs

RIO
	HOST : plan9
	TYPE : album
	BREF : Notes on the Plan9 interface and tools.
	BODY
		<p>Rio is the name of the windowing system of the {Plan9} operating system. To draw a new window on the screen you can right-click on an empty spot on the desktop and choose New You will see that the mouse cursor changes to a plus.</p>
		<p>Moving windows around doesn't work like with other systems. Since there's no window title bar at the top, you can't left-click and drag it around. Instead, you can right-click and drag using the border of the window. The mouse cursor turns into a box shape in the process. Alternatively, there is a Move option when you right-click on the desktop that allows you to right-click and drag anywhere on a window to move it around.</p>
		{^img refs/glenda2.gif}

ACME
	HOST : plan9
	TYPE : pict_portal
	BREF : Notes on the Plan9 ACME development toolkit.
	BODY
		<p>Acme is the classic text editor for the {Plan9} operating system. The killer feature of Acme is how it integrates into surrounding system. Acme is not trying to be a complete environment by itself. Acme acts as a glue which links together other programs and tools. With Acme the OS becomes your IDE.</p>
		<p>Middle clicking on a word or some selected text *executes* that command. Right-clicking on a file can potentially open up a new window, depending on which program is registered to handle the file type. You can close windows by right-clicking on an empty spot on the desktop, choose Delete and then right click on the window.</p>
	LINK
		Acme Screencast : https://research.swtch.com/acme
		Acme Readme : http://acme.cat-v.org/readme

PLAN9 C
	HOST : plan9
	TYPE : album
	BREF : Notes on customizing and developing on the Plan 9 operating system.
	BODY
		<p>Collected notes on writing GUI applications and modifying the look and feel of the {Plan9} operating system. For a more complete example, see the {plan9_clock Plan9 Clock}. For more general notes on the C language, see {ansi_c ANSI C}.</p>
	LINK
		Intro to C Programming on Plan 9 : http://doc.cat-v.org/plan_9/programming/c_programming_in_plan_9
		Intro to Graphics on Plan 9 : http://blog.postnix.pw/2018/09/21/0
		Interface Tutorial : https://github.com/nspool/hello-plan9
		Audio : http://nopenopenope.net/posts/audio

PLAN9 CLOCK
	HOST : plan9
	BREF : Updated the look of the Plan9 clock.
	BODY
		<p>I wasn't <i>really</i> into the whole baby blue clock, also in it not displaying seconds, so I've fixed it up a bit. It now displays each second on the clockface, and use hairline thin lines drawn through the Bresenham algorithm. The style is designed to align with the {plan9_color Plan9 Color Picker}. This project is a good simple demonstration of {plan9_c Plan9 C}.</p>
		<h3>Installation</h3>
		<p>Compile this source with the compiler for your platform, if you are using an ARM device:</p>
		<pre>5c clock.c && 5l -o clock clock.c</pre>
		<p>If you want to install globally, copy the source into <code>/sys/src/cmd/clock.c</code> and type <code>mk install</code> inside of <code>/sys/src/cmd</code>, to recompile all the applications found in the cmd directory.</p>
		{^text clock9.c}

PLAN9 COLOR
	HOST : plan9
	BREF : A simple HSV color picker for Plan9.
	BODY
		<p>Just a simple color picker utility written in {plan9_c Plan9 C}, following the style of the {plan9_clock Plan9 Clock}. Alternatively, you can use {https://git.sr.ht/~ft/picker Sigrid's Color Picker} if you want to use something made by someone who knows what they're doing.</p>
		<h3>Installation</h3>
		<p>Compile this source with the compiler for your platform, if you are using an ARM device:</p>
		<pre>5c color.c && 5l -o color color.c</pre>
		{^text color9.c}
	LINK
		Another Color Picker : https://git.sr.ht/~ft/picker

LINUX
	HOST : unix
	BREF : Linux is a collection of tools built within the Unix operating systems.
	BODY
		{^list linux software}

HYDROGEN
	HOST : notebook
	BREF : Lightest, simplest, most abundant element in the universe. Highest energy content of any common fuel by weight, but the lowest energy content by volume.
	BODY
		<p>It takes about 15 volts to electrolyze pure water, but pure water is not the ideal fuel to begin with, water with electrolytes dissolved in it is. If you live near the ocean, the ideal fuel medium is plain sea water, which has the perfect level of salinity for electrolysis, and requires not 15 volts to separate the hydrogen from the oxygen, but only 1/2 of a volt.</p>
	LINK
		energypedia : https://energypedia.info/wiki/Hydrogen
		hydrogen economy : https://en.wikipedia.org/wiki/Hydrogen_economy
		hydrogen generator : https://fuel-efficient-vehicles.org/energy-news/?page_id=927

NAUTICAL
	HOST : notebook
	BREF : Assorted notes on various nautical language systems.
	TYPE : pict_portal
	BODY
		{^list celestial navigation}
	LINK
		Lowtech : https://www.lowtechmagazine.com/2010/06/lost-knowledge-ropes-and-knots.html

MORSE
	HOST : nautical
	BREF : Assorted notes on the morse language system. 

RADIO
	HOST : nautical
	BREF : Collected notes on the topic of radio communications.
	BODY
		<p>Realize that the strict control of the ability to transmit is due to the fear of the state, they realize that radio is a decentralized form of communication that can be used to question their power. </p>
	LINK
		Radio for Rebels : https://iaf-fai.org/2020/10/11/skills-for-revolutionary-survival-5-communications-equipment-for-rebels/

TALK
	HOST : notebook
	TYPE : album
	BREF : For the few times I give talks.
	BODY
		<p>From time to time, I will be invited to go present about a topic in front of a small crowd. I usually am invited to talk about some flavor of {nataniev} or things related to {pino sailing}.</p>
	LINK
		source : https://github.com/neauoire/Talk-Amaze

THE SARTRE MECHANISM
	HOST : notebook
	TYPE : album
	BREF : The Sartre Mechanism short.
	BODY
		<p>It was the first day of the winter when a friend invited me to witness the completion of a recent project.</p>
		<p>Crouched over a heap of cogs, she did not look over as I hung my snow-covered coat on something that, by the look of it, might very well be a time machine. A distracted gaze turned for a moment, perhaps to make sure that I did not break anything as I navigated the busy studio.</p>
		<p>What I first perceived as a pile of junk turned out to be an intricate clocklike mechanism; where the needles would have been, a small hand rested at the end of a short metallic arm.</p>
		<p>My friend held a minuscule weight above the tiny hand, before carefully laying it onto its opened palm. Whirring and clicking, a second arm emerged and plucked a gear out from its own ticking body and laid it back into the toolbox at its side. In controlled gestures, activated by the weight, tiny arms dismantled bolts and screws, while carefully putting them in that toolbox, gradually taking the casing of the mechanism apart, leaving its core exposed.</p>
		<p>I stared in silent awe, at the busy mechanical concerto playing its own requiem. The arms eventually began to unbuilding the core, growing forever weakly as it dismantled the remaining components, moving them back into the box. This obscene ritual of disembowelment and exposé on pointlessness ended as the tiny arms and the weight had fallen back into the toolbox.</p>
		<p>Written by {https://twitter.com/voidshaper Voidshaper} & {devine_lu_linvega Neauoire}.</p>

JUNI
	HOST : raspberry
	TYPE : album
	BREF : Juni one-handed chorded keyboard.
	BODY
		<p>The <b>Juni Layout</b> is a 12-keys {https://en.wikipedia.org/wiki/Chorded_keyboard chorded keyboard}.</p>
		<p>The {keyboard} model is {https://learn.pimoroni.com/keybow Pimoroni's Keybow}, the <code>.lua</code> layout is available on {https://github.com/neauoire/Juni Github}. It was designed to be used with the {orca} livecoding environment, but has most common keys and controls, making it a versatile and portable single-handed keyboard.</p>
		<p>To find another example of experimental keyboard design, see {keyboard_468 Keyboard 468}.</p>
		{^youtube cgBvWsM3Z7g}
	LINK
		source : https://github.com/neauoire/Juni

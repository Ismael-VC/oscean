<h2>Uxn is a virtual machine with 32 instructions.</h2>

<p>The Uxn ecosystem is a personal computing playground, created to host small <a href='roms.html'>tools and games</a>, programmable in its own unique <a href='uxntal.html'>assembly language</a>. </p>

<img src='../media/generic/uxn.png' width='200' style='float:right'/>

<p>It was designed with an implementation-first mindset with the goal of targeting salvaged computers, the distribution of Uxn projects is akin to sharing game roms for any classic console emulator.</p>

<h2>Memory</h2>

<table border='1'>
	<tr><th rowspan='4'>Stacks</th><td rowspan='2'>Working Stack</td><td>Pointer</td><td>1 byte</td></tr>
	<tr><td>Data</td><td>256 bytes</td></tr>
	<tr><td rowspan='2'>Return Stack</td><td>Pointer</td><td>1 byte</td></tr>
	<tr><td>Data</td><td>256 bytes</td></tr>
	<tr><th rowspan='2'>Memory</th><td rowspan='2'>RAM</td><td>Pointer</td><td>1 short</td></tr>
	<tr><td>Data</td><td>64kb</td></tr>
</table>

<p>The CPU can tunnel through 128 subroutines and find its way back with its return stack. The CPU can connect to up to 16 devices at once, devices can be peripherals such as screens and controllers, or even an other Uxn CPU.</p>

<h2>Design</h2>

<p>Because Uxn was explicitly created to exist as software hosted on <a href='permacomputing.html'>pre-existing hardware</a>, the design was advised primarily by relative software complexity, not by how fast it could be made. Features were weighted against the relative difficulty they would add for programers implementing their own emulators.</p>

<p>Stack-machines, and <a href='reverse_polish.html'>postfix arithmetic</a>, are ideal candidates for this scale of personal computing. Not only does it make for extremly basic compilers, the resulting succinct programs translates well to <a href='paper_computing.html'>pen & paper computing</a>.</p>

<figure>
	<img src='../media/generic/fizzbuzz.png' border='2'/>
	<figcaption>—fizzbuzz.rom</figcaption>
</figure>

<p>With only 64kb of memory, it will never be capable of running Chrome, TensorFlow or a blockchain. It sucks at doing most modern computing, but it’s also sort of the point. It's more about finding what new things could be made in such a small system.</p>

<q>What's the benefit of Uxn over C, when just about everything has a C compiler?</q>

<p>While terminal utilities can be made <i>portable</i>, cross-platform graphical development is different. For example, building a project in C, for both <a href='linux.html'>Linux</a> and <a href='plan9.html'>Plan 9</a>, will require a near total rewrite, whereas porting the thin layer that is the <a href='varvara.html'>uxn emulator</a> will allow that same rom file to be used on both systems.</p>

<h2>C Implementation</h2>

<p>The VM is implemented in about 140 lines of <a href='ansi_c.html'>ANSI C</a>, it lives at the core of the <a href='varvara.html'>Varvara computer</a>, Uxn is to Varavara, what the 6502 is to the Classic Nintendo.</p>

<pre>
static void
run(Uxn *u)
{
	Uint16 vec = PAGE_PROGRAM;
	uxn_eval(u, vec);
	while(uxn_eval(u, vec))
		;
}
</pre>

<iframe src="https://git.sr.ht/~rabbits/uxn/blob/main/src/uxn.c"></iframe>

<ul>
	<li><a href='https://sr.ht/~rabbits/uxn/' target='_blank'>source</a></li>
	<li><a href='https://llllllll.co/t/uxn-virtual-computer/46103' target='_blank'>forum</a></li>
	<li><a href='https://kokorobot.ca/' target='_blank'>original illustrations by rekka bellum</a></li>
</ul>


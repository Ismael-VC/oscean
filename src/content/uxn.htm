<h2>Uxn is a virtual machine with 32 instructions.</h2>

<img src='../media/generic/uxn.png' width='200' style='float:right'/>

<p>The Uxn ecosystem is a <b>personal computing</b> system created to host small <a href='roms.html'>tools and games</a>, programmable in a unique <a href='uxntal.html'>assembly language</a>. It was designed with an implementation-first mindset with a focus on creating portable graphical applications.</p>

<p>This <a href='about.html'>wiki</a> and most of the audio-visual works documented on here were created with Uxn-powered tools.</p>

<h2>Memory</h2>

<p>The CPU can tunnel through 127 subroutines and find its way back with its return stack. The CPU can connect to up to 16 devices at once, devices can be peripherals such as screens and controllers, or even an other <a href='varvara_supervisor.html'>uxn</a>.</p>

<table border='1'>
	<tr><th rowspan='4'>Stacks</th><td rowspan='2'>Working Stack</td><td>Pointer</td><td>1 byte</td></tr>
	<tr><td>Data</td><td>255 bytes</td></tr>
	<tr><td rowspan='2'>Return Stack</td><td>Pointer</td><td>1 byte</td></tr>
	<tr><td>Data</td><td>255 bytes</td></tr>
	<tr><th rowspan='2'>Memory</th><td rowspan='2'>RAM</td><td>Pointer</td><td>1 short</td></tr>
	<tr><td>Data</td><td>64kb</td></tr>
	<tr><th>IO</th><td>Devices</td><td>Data</td><td>256 bytes</td></tr>
</table>

<h2>Design</h2>

<p>Because Uxn was explicitly created to exist as software hosted on <a href='permacomputing.html'>pre-existing hardware</a>, the design was advised primarily by relative software complexity, not by how fast it could be made to run. Features were weighted against the relative difficulty they would add for programmers implementing their own emulators.</p>

<p>Stack-machines, and <a href='reverse_polish.html'>postfix arithmetic</a>, are ideal candidates for this scale of personal computing. Not only does it make for extremely basic compilers, the resulting programs are succinct and translate well to <a href='paper_computing.html'>pen & paper computing</a>.</p>

<figure>
	<img src='../media/generic/fizzbuzz.png' border='2'/>
	<figcaption>—fizzbuzz.rom</figcaption>
</figure>

<p>With only 64kb of memory, it will never run Chrome, TensorFlow or a blockchain. It sucks at doing most modern computing, but it’s also sort of the point. It's more about finding what new things could be made in such a small system.</p>

<h2>C Implementation</h2>

<p>The VM is implemented in about 120 lines of <a href='ansi_c.html'>ANSI C</a>, it lives at the core of the <a href='varvara.html'>Varvara computer</a>, Uxn is to Varvara, what the 6502 is to the Classic Nintendo.</p>

<iframe src="https://git.sr.ht/~rabbits/uxn/blob/main/src/uxn.c"></iframe>

<p>The original illustrations were created by <a href='https://kokorobot.ca/' target='_blank'>Rekka Bellum</a>.</p>

<ul>
	<li><a href='https://sr.ht/~rabbits/uxn/#download-binaries' target='_blank'>download</a></li>
	<li><a href='https://sr.ht/~rabbits/uxn/' target='_blank'>source</a></li>
	<li><a href='https://llllllll.co/t/uxn-virtual-computer/46103' target='_blank'>forum</a></li>
	<li><a href='https://100r.co/site/story.html' target='_blank'>why uxn?</a></li>
</ul>

<h2>CHR is a 2-bit graphic format for Famicom and Uxn spritesheets.</h2>

<p>The <code>CHR</code> file contains a series of bits equivalent to pixels for each tile in the spreadsheet of a rom. A chr tile is 8x8 pixels, the data for each tile is made up of 128 bits, where the first 64 bits are the first color, the next 64 bits the second color, and where the colors overlap result in the third color, for a total of 4 colors including the background.</p>

<pre>
Uint8 icon[16] = {
	0x38, 0x7c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x00,
	0x38, 0x7c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x00
};
</pre>

<p>If you're looking for a simple editor and <a href='ansi_c.html'>ANSI C</a> implementation, see <a href='nasu.html'>Nasu</a> and <a href='dexe.html'>Dexe</a>. To convert an image into sprites, see <a href='dito.html'>Dito</a>. You will find this filetype in most of the <a href='famicom.html'>famicom</a> and <a href='uxn.html'>Uxn</a> ecosystems.</p>

<pre>
void
drawchr(Uint32 *dst, int x, int y, Uint8 *sprite)
{
	int v, h;
	for(v = 0; v < 8; v++)
		for(h = 0; h < 8; h++) {
			int ch1 = ((sprite[v] >> h) & 0x1);
			int ch2 = (((sprite[v + 8] >> h) & 0x1) << 1);
			putpixel(dst, x + 7 - h, y + v, ch1 + ch2);
		}
}
</pre>
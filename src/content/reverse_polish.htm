<h2>In Reverse Polish Notation, the operators follow their operands.</h2>

<p>In RPN calculators, no equals key is required to force computation to occur. To learn more about a programming language using RPN at its core, see <a href='forth.html'>Forth</a>. To find a simple RPN implementation and playground, see <a href='firth.html'>Firth</a>.</p>

<p>For instance, one would write <code>3 4 +</code> rather than <code>3 + 4</code>. If there are multiple operations, operators are given immediately after their second operands. The expression written <code>(5 + 10) * 3</code> in conventional notation would be written <code>10 5 + 3 *</code> in reverse Polish notation.</p>

<table border='1'>
	<tr><td><i>operation</i></td><th>3</th><th>10</th><th>5</th><th>+</th><th>*</th></tr>
	<tr><td rowspan='3'><i>stack</i></td><td rowspan='3'>3</td><td>10</td><td>5</td><td>15</td><td rowspan='3'>45</td></tr>
	<tr><td rowspan='2'>3</td><td>10</td><td rowspan='2'>3</td></tr>
	<tr><td>3</td></tr>
</table>

<p>The automatic stack permits the automatic storage of intermediate results for use later: this key feature is what permits RPN calculators to easily evaluate expressions of arbitrary complexity: they do not have limits on the complexity of expression they can evaluate.</p>

<p>Brackets and parentheses are unnecessary: the user merely performs calculations in the order that is required, letting the automatic stack store intermediate results on the fly for later use. Likewise, there is no requirement for the precedence rules required in infix notation.</p>

<table border='1'>
	<tr><th>Infix</th><th>Postfix</th></tr>
	<tr><td>3 + 4</td><td>3 4 +</td></tr>
	<tr><td>500 – 300</td><td>500 300 –</td></tr>
	<tr><td>6 x 5</td><td>6 5 *</td></tr>
	<tr><td>20 / 4</td><td>20 4 /</td></tr>
</table>
<ul>
	<li><a href='https://git.sr.ht/~rabbits/firth' target='_blank'>Firth</a></li>
</ul>


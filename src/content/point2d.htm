<p>Point2d toolkit in ANSI C.</p>

<pre>typedef struct {<br />	int x, y;<br />} Point2d;<br /><br />Point2d *<br />setpt2d(Point2d *p, int x, int y)<br />{<br />	p-&gt;x = x;<br />	p-&gt;y = y;<br />	return p;<br />}<br /><br />Point2d<br />Pt2d(int x, int y)<br />{<br />	Point2d p;<br />	setpt2d(&amp;p, x, y);<br />	return p;<br />}<br /><br />Point2d<br />mid2d(Point2d a, Point2d b, int seg, int segs)<br />{<br />	return Pt2d(<br />		a.x + ((b.x - a.x) / (double)segs) * seg,<br />		a.y + ((b.y - a.y) / (double)segs) * seg);<br />}<br /><br />Point2d *<br />mag2d(Point2d *a, int step)<br />{<br />	return setpt2d(a,<br />		abs(a-&gt;x / step) * step,<br />		abs(a-&gt;y / step) * step);<br />}<br /><br />int<br />equ2d(Point2d *a, Point2d *b)<br />{<br />	return a-&gt;x == b-&gt;x &amp;&amp; a-&gt;y == b-&gt;y;<br />}<br /><br />int<br />distance2d(Point2d p0, Point2d p1)<br />{<br />	double a = p0.x - p1.x, b = p0.x - p1.x;<br />	return sqrt(a * a + b * b);<br />}<br /><br />int<br />collinear2d(Point2d a, Point2d b, Point2d c)<br />{<br />	return (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);<br />}<br /></pre>


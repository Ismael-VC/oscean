<p>Varvara is a clean-slate computing stack based on the Uxn CPU.</p>

<p>The Varvara computer system was designed with a focus on <a href='permacomputing.html'>portability</a>, built on top of the 8-bit <a href='uxn.html'>Uxn stack-machine</a>. It is an ideal platform for running small audio/visual applications. To see a list of compatible software, see <a href='roms.html'>roms</a>.</p>
<img src='../media/generic/uxn.comfy.png' width='250' style='margin: 0px auto 30px'/>
<p>Devices are external systems connected to the Uxn CPU, such as the screen, the mouse, the keyboard, etc. There is a maximum of 16 devices, each device has 16 bytes of I/O memory.</p>

<h2>Standard Devices</h2>

<table border='1'>
	<tr><th rowspan='2' colspan='2'>device</th><th colspan='2'>i/o</th><th rowspan="2">Notes</th></tr>
	<tr><th>0x00</th><th>0x08</th></tr>

	<tr><th rowspan='5'><code>00</code></th><th rowspan='5'><a href='#system'>system</a></th><td>vector*</td><td class='bg1'>red*</td><td rowspan="5">The system device vector is currently unused.</td></tr>
	<tr><td>wst</td><td class='bg1'>green*</td></tr>
	<tr><td>rst</td><td class='bg1'>blue*</td></tr>
	<tr><td rowspan='2'></td><td>debug</td></tr>
	<tr><td class='bg1'>halt</td></tr>

	<tr><th rowspan='2'><code>10</code></th><th rowspan='2'><a href='#console'>console</a></th><td class='bg2'>vector*</td><td class='bg1'>write</td><td rowspan="2">The console device's vector is triggered once for each character received through <a href='unix.html'>stdin</a>, and stored in the read port.</td></tr>
	<tr><td>read</td><td class='bg1'>error</td></tr>

	<tr><th rowspan='5'><code>20</code></th><th rowspan='5'><a href='#screen'>screen</a></th><td class='bg2'>vector*</td><td>x*</td><td rowspan="5">The screen device's vector is triggered 60 times per second, it is typically used to update pixels on the screen.</td></tr>
	<tr><td>width*</td><td>y*</td></tr>
	<tr><td>height*</td><td>addr*</td></tr>
	<tr><td rowspan="2"></td><td class='bg1'>pixel</td></tr>
	<tr><td class='bg1'>sprite</td></tr>

	<tr><th rowspan='5'><code>30</code><br /><code>40</code><br /><code>50</code><br /><code>60</code></th><th rowspan='5'><a href='#audio'>audio</a></th><td>vector*</td><td>adsr*</td><td rowspan="5">The audio device vector is currently unused.</td></tr>
	<tr><td>position*</td><td>length*</td></tr>
	<tr><td>output</td><td>addr*</td></tr>
	<tr><td rowspan="2"></td><td>volume</td></tr>
	<tr><td class='bg1'>pitch</td></tr>

	<tr><th rowspan="3"><code>80</code></th><th rowspan="3"><a href='#controller'>controller</a></th><td class='bg2'>vector*</td><td rowspan="3"><i>nil</i></td><td rowspan="3">The controller device's vector is triggered each time a key is pressed or released.</td></tr>
	<tr><td>button</td></tr>
	<tr><td>key</td></tr>

	<tr><th rowspan='5'><code>90</code></th><th rowspan='5'>mouse</th><td class='bg2'>vector*</td><td rowspan="5"><i>nil</i></td><td rowspan="5">The mouse device's vector is triggered each time the mouse moved, or a button was pressed or released.</td></tr>
	<tr><td>x*</td></tr>
	<tr><td>y*</td></tr>
	<tr><td>state</td></tr>
	<tr><td>wheel</td></tr>

	<tr><th rowspan='4'><code>a0</code></th><th rowspan='4'>file</th><td>vector*</td><td>name*</td><td rowspan="4">The file's vector is currently unused. The reading/writing of a file will set the success short to the length of that data.</td></tr>
	<tr><td>success*</td><td>length*</td></tr>
	<tr><td>offset-high*</td><td class='bg1'>addr(r)*</td></tr>
	<tr><td>offset-low*</td><td class='bg1'>addr(w)*</td></tr>
	
	<tr><th rowspan='6'><code>b0</code></th><th rowspan='6'>datetime</th><td>year*</td><td rowspan="6"><i>nil</i></td><td rowspan="6">The datetime's vector is currently unused.</td></tr>
	<tr><td>month</td></tr>
	<tr><td>day</td></tr>
	<tr><td>hour</td></tr>
	<tr><td>minute</td></tr>
	<tr><td>second</td></tr>
</table>

<h3 id='system'>System Device</h3>

<p>This device is holding 3 shorts to be used for application customization. For a device that does not use a screen, these bytes may be used for speech controls, or other system globals, for simplicity we call them the Red*, Green* and Blue* shorts.</p>
<p>The <code>0xe</code> port is used to keep the debug mode flag, when active, the debug and diagnostic tools should be active. Writing to the <code>0xf</code> port will send the program counter to <code>0x0000</code> and stop the evaluation.</p>

<pre>
%BREAKPOINT { #0101 #0e DEO2 } <span style='float:right; color:#888'>( macro to set a break-point )</span>
</pre>

<h3 id='console'>Console Device</h3>

<p>The console device is the standard I/O device, it allows for communication between programs on the host computer, or even between instances of Uxn.</p>

<pre>
#41 #18 DEO <span style='float:right; color:#888'>( to send the letter "A" )</span>
</pre>

<p>To send data from one Uxn to another, when using a <a href='unix.html'>Unix</a> host, use the following pattern:</p>

<pre>uxnemu orca.rom | uxnemu piano.rom</pre>

<p>For example, a program sending the line of text "hello", will trigger the console's vector 6 times; one for each character and a line ending character. </p>

<h3 id='screen'>Screen Device</h3>

<img src='../media/generic/uxn.ppu.jpg' style='float:right' width='240' />

<p>The screen device is made of two overlayed screen buffers, displaying 2-bits graphics in up to 4 colors. Drawing pixels to the screen is done by writing values to the screen's <code>x*</code>, <code>y*</code> and <code>pixel</code> ports of the screen device.</p>

<pre>
M L * *            D C B A            
| | | +---- Flipx  | | | +---- Blend   
| | +------ Flipy  | | +------ Blend   
| +-------- Layer  | +-------- Blend  
+---------- Mode   +---------- Blend  
</pre>

<p>The screen can also draw 8x8 sprites by writing an <code>addr*</code> which points to the <a href='chr_format.html'>sprite data</a> in memory. The <b>sprite byte</b> defines the layer to draw on, the type of data to draw, and the colors to use. </p>

<table border='1'>
	<tr><th colspan='8'>Sprite Blending</th></tr>
	<tr>
		<th>0</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg0 fg0'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>4</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg1 fg0'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>8</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg2 fg0'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>c</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg3 fg0'><circle cx="10" cy="10" r="8"/></svg></td>
	</tr>
	<tr>
		<th>1</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg0 fg1'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>5</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite fg1' style='background:#ccc'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>9</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg2 fg1'><circle cx="10" cy="10" r="8"/></svg></td><th>d</th>
		<td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg3 fg1'><circle cx="10" cy="10" r="8"/></svg></td>
	</tr>
	<tr>
		<th>2</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg0 fg2'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>6</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg1 fg2'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>a</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite fg2' style='background:#ccc'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>e</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg3 fg2'><circle cx="10" cy="10" r="8"/></svg></td>
	</tr>
	<tr>
		<th>3</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg0 fg3'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>7</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg1 fg3'><circle cx="10" cy="10" r="8"/></svg></td>
		<th>b</th><td><svg xmlns="http://www.w3.org/2000/svg" class='sprite bg2 fg3'><circle cx="10" cy="10" r="8"/></svg></td><th>f</th>
		<td><svg xmlns="http://www.w3.org/2000/svg" class='sprite fg3' style='background:#ccc'><circle cx="10" cy="10" r="8"/></svg></td>
	</tr>
</table>

<p>Sprites are 8x8 tiles, stored in memory as sequences of 8 bytes for a 1bpp sprite, and 16 bytes for a 2bpp sprite. For example, the color byte <code>#01</code> will paint a 1bpp sprite on the background with the first system color, and <code>#32</code> will paint a 2bpp sprite on the foreground with the second system color. </p>

<p>The permutations of the sprite byte are as follow:</p>

<img src='../media/generic/varvara.blending.png' />

<p>Here's a <a href='uxntal.html'>Uxntal</a> routine to draw a 1-bit sprite at position <code>20,30</code>.</p>

<pre>
@paint-sprite
	#0020 #28 DEO2
	#0030 #2a DEO2
	;sprite #2c DEO2
	#01 #2f DEO
RTN

@sprite
	0f38 675f dfbf bfbf
</pre>

<h3 id='audio'>Audio Device</h3>

<img src='../media/generic/uxn.apu.jpg' style='float:right' width='240' />

<p>When <code>pitch</code> is written to any of the audio devices, it starts playing an audio sample from Uxn's memory, pointed to by <code>addr*</code> and <code>length*</code>. It loops the sample (unless told not to) until it reaches the end of the ADSR envelope defined by <code>adsr*</code>.</p>

<p>Several fields contain more than one component:</p>

<table border='1'>
	<tr><th></th><th colspan='4'>ADSR*</th><th colspan='2'>Pitch</th><th colspan='2'>Volume</th></tr>
	<tr><th>Subfield</th><td>Attack</td><td>Decay</td><td>Sustain</td><td>Release</td><td>Loop</td><td>Note</td><td>Left</td><td>Right</td></tr>
	<tr><th>Size (bits)</th><td>4</td><td>4</td><td>4</td><td>4</td><td>1</td><td>7</td><td>4</td><td>4</td></tr>
</table>

<p>Each of the ADSR components is measured in 15ths of a second, so writing <code>#ffff</code> to <code>adsr*</code> will play a note that lasts for exactly four seconds, with each section of the envelope lasting one second. If <code>adsr*</code> is <code>#0000</code> then no envelope will be applied: this is most useful for longer samples that are set to play once by setting the most significant bit of <code>pitch</code> to 1.</p>

<p>The envelope varies the amplitude as follows: starting at 0%, rising to 100% over the Attack section, falling to 50% over the Decay section, remaining at 50% throughout the Sustain section and finally falling to 0% over the Release section. The envelope is linearly interpolated throughout each section.</p>

<p>The two <code>volume</code> components set how loudly the next sample will play. <code>#ff</code> sets maximum volume for both speakers.</p>

<p>When <code>pitch</code> is written, any sample that is currently playing will be replaced with the sample defined by all the values set in the device. While the sample is playing, the <code>output</code> byte can be read to find the loudness of the envelope at that moment.</p>

<h4>Audio Sample Format</h4>

<p>All samples used by the audio devices are mono and unsigned 8-bit (also known as <b>u8</b>), so the space taken up by samples is minimized. The sample rate of the samples depends on <code>length*</code>:</p>

<table border='1'>
	<tr><th><code>length*</code></th><th>Sample type</th><th>Sample rate</th></tr>
	<tr><td>&gt; 256</td><td>Middle-C pitched sample</td><td>44,100 Hz</td></tr>
	<tr><td>2–256</td><td>Single wavelength</td><td>Variable</td></tr>
</table>

<p>Long samples are assumed to be already pitched to Middle C and will loop (unless No Loop is 1) until the end of the envelope. To play the sample at the same rate as it was recorded, write the Middle C MIDI note number, <code>#3c</code>, to <code>pitch</code>. To play at double or half speed, for example, write an octave higher or lower to <code>pitch</code>.</p>

<p>The minimum sample size that can be pitched at 44.1 kHz to Middle C with reasonable accuracy is 337 bytes long, which represents two cycles of the 261 Hz wave. The single wavelength mode in Uxn allows much smaller samples to be used, even down to only two bytes for a square wave. In this mode the length of the entire sample is taken to be one cycle of the Middle C note, so the pitch is not heard to vary even if <code>length*</code> were to change between sample plays.</p>

<h3 id='controller'>Controller Device</h3>

<p>This button byte works similarly to a <a href='https://wiki.nesdev.com/w/index.php/Standard_controller' target='_blank'>NES controller</a>, where there the state of each one of the 8 buttons is stored as a bit in a single byte. The keys byte contains the ascii character that is currently pressed.</p>

<table border='1'>
	<tr><td><code>0x01</code></td><td><code class='button'>A</code> <i>Ctrl</i></td><td><code>0x10</code></td><td><code class='button'>Up</code></td></tr>
	<tr><td><code>0x02</code></td><td><code class='button'>B</code> <i>Alt</i></td><td><code>0x20</code></td><td><code class='button'>Down</code></td></tr>
	<tr><td><code>0x04</code></td><td><code class='button'>Select</code> <i>Shift</i></td><td><code>0x40</code></td><td><code class='button'>Left</code></td></tr>
	<tr><td><code>0x08</code></td><td><code class='button'>Start</code> <i>Escape</i></td><td><code>0x80</code></td><td><code class='button'>Right</code></td></tr>
</table>

<style>
svg.sprite { width:20px; height:20px; margin-bottom:0px }
.bg0 { background:white; color:black; }
.bg1 { background:black; color:white; }
.bg2 { background:#72dec2; color:black; }
.bg3 { background:#ff0000; color:black; }
.fg0 { fill:white; }
.fg1 { fill:black; }
.fg2 { fill:#72dec2; }
.fg3 { fill:#ff0000; }
code.button { background: #000; color: white; font-size: smaller; display: inline-block; padding: 0px 6px; font-weight: bold; border-radius: 2px; line-height: 22px }
</style>

<img src='../media/identity/uxn64.png' />
<ul>
	<li><a href='https://git.sr.ht/~rabbits/uxn/' target='_blank'>Uxn on Desktop</a></li>
	<li><a href='https://git.sr.ht/~rabbits/uxn-playdate' target='_blank'>Uxn on Playdate</a></li>
	<li><a href='https://github.com/asiekierka/uxnds' target='_blank'>Uxn on Nintendo DS</a></li>
	<li><a href='https://github.com/aduros/webuxn' target='_blank'>Uxn on Browser</a></li>
	<li><a href='https://git.badd10de.dev/uxngba' target='_blank'>Uxn on Gameboy Advance</a></li>
	<li><a href='https://github.com/ivodopiviz/uxnvita' target='_blank'>Uxn on PS Vita</a></li>
	<li><a href='https://github.com/csboling/teluxn' target='_blank'>Uxn on Teletype</a></li>
	<li><a href='https://git.sr.ht/~alderwick/pico-uxn-sharpdisplay' target='_blank'>Uxn on Pico Pi</a></li>
	<li><a href='https://github.com/max22-/uxn-esp32' target='_blank'>Uxn on Esp32</a></li>
</ul>


<h2>ICN is a 1-bit graphic format for Uxn spritesheets.</h2>

<p>The <code>ICN</code> file contains a series of bits equivalent to pixels for each tile in the spreadsheet of a rom. A chr tile is 8x8 pixels, the data for each tile is made up of 64 bits, where each bit is a pixel. An ICN is the first half of a <a href='chr_format.html'>CHR</a>.</p>

<table border='1'>
	<tr><th colspan="8">bits</th><th>hex</th></tr>
	<tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>00</code></td></tr>
	<tr><td>0</td><td>0</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td>0</td><td>0</td><td><code>3c</code></td></tr>
	<tr><td>0</td><td class='col1'>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td class='col1'>1</td><td>0</td><td><code>42</code></td></tr>
	<tr><td>0</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td>0</td><td><code>7e</code></td></tr>
	<tr><td>0</td><td class='col1'>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>40</code></td></tr>
	<tr><td>0</td><td class='col1'>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td class='col1'>1</td><td>0</td><td><code>42</code></td></tr>
	<tr><td>0</td><td>0</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td class='col1'>1</td><td>0</td><td>0</td><td><code>3c</code></td></tr>
	<tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td><code>00</code></td></tr>
</table>

<h3>ICN Example</h3>

<table border='1'>
	<th colspan="2">3x3 Sprite</th>
	<tr>
		<td>
<img src='../media/generic/endchr.png'/></td>
		<td>	
<pre>
0003 6331 397b 77f8 c0f0 f7ff fff0 8003
1c7e feff 0f07 078e f860 0c07 0300 301f
071f 7cf8 f007 7fff dcc0 c000 70f8 f8b0
0f07 4143 677f 7f3e ffe3 87cf cfcf 8703
84c4 8406 0efe fcf8 	
</pre>
		</td>
	</tr>
</table>

<pre>
Uint8 icon[8] = {0x38, 0x7c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x00};
</pre>

<pre>
void
draw_icn(Uint32 *dst, int x, int y, Uint8 *sprite, int fg, int bg)
{
	int v, h;
	for(v = 0; v < 8; v++)
		for(h = 0; h < 8; h++) {
			int ch1 = (sprite[v] >> (7 - h)) & 0x1;
			putpixel(dst, x + h, y + v, ch1 ? fg : bg);
		}
}
</pre>

<p>To convert non-black pixels of an image to an icn file:</p>

<pre>
void
export_icn(Uint32 *src, int width, int height, char *filename)
{
	int i, x, y;
	Uint8 icnbuf[SZ];
	FILE *f = fopen(filename, "wb");
	/* clean memory */
	for(i = 0; i < SZ; ++i)
		icnbuf[i] = 0;
	/* write pixels */
	for(y = 0; y < height; ++y) {
		for(x = 0; x < width; ++x) {
			int color = pixels[y * width + x];
			if(color) {
				int col = x & 7, row = y & 7;
				int byte = (x & ~7) + (y & ~7) * width / 8 + row;
				icnbuf[byte] |= 1 << (7 - col);
			}
		}
	}
	/* save file */
	if(!fwrite(icnbuf, sizeof(icnbuf), 1, f))
		fprintf(stderr, "Failed: %s!\n", filename);
	fclose(f);
	fprintf(stderr, "Export: %s\n", filename);
}
</pre>

<style>
	.col1 { background: #000; color:white }
</style>